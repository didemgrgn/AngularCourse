{
    "pipes": [
        {
            "name": "MyFilteringPipe",
            "id": "pipe-MyFilteringPipe-1b22009dc6d79071d99ef6998b809430",
            "file": "src/libs/custom-pipes/my-filtering.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "myFiltering",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'myFiltering'\n})\nexport class MyFilteringPipe implements PipeTransform {\n\n  transform(value: string[], ...args: any[]): any { //value: unknown du yazılan değere göre değiştirilebilir.\n    let result: any[] =[]; //herhangi bir array aldığı değer boş\n    value.forEach(element => { //value cities array dir. Aldığımız value yu dönüyoruz\n      const isExistLetter =element.includes(args[0].toString());//0.indexinde ki değer bu string in içinde varsa eklenmek istiyor değilse kalsın    \n      if(isExistLetter){ //isExistLetter true ise\n        result.push(element);  //true ise bu elementi resul array ine push yapıyor\n      }\n    });\n    return result; //ve bu result arrayi dönüyor\n  }\n\n}\n"
        },
        {
            "name": "TlPipe",
            "id": "pipe-TlPipe-62fd9934f91d8f26223b2315d81290cb",
            "file": "src/libs/custom-pipes/tl.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "tl",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'tl'\n})\nexport class TlPipe implements PipeTransform {\n\n  transform(value: unknown, ...args: unknown[]): unknown { \n    return \"₺\"+value+\" mevcut para \"; //gelen value nın başına ₺ ekleyip value göndermesi için\n  }\n\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "city",
            "id": "interface-city-6d479769c1b0e1052ce0db1b2835e215",
            "file": "src/libs/services/map.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\n\ninterface city {\n  id:number;\n  name:string;\n  plaka:number;\n  region:string; //? => olmasa da olur demektir.\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MapService {\n//Servis üzerinden besleniyor plaka,region ve city\n//Servis mock datası kaydetmiyor sabit kalıcı datalar değildir, proje her reflesh olduğunda eklenen değişen datalar kaybolur .\n//Cities mock datadır ve servis mock datalarla bu sebeple kullanılmaz.\n//Sabit olarak kaydetmesi için 1)cities arrayini cookie ya da local storage olarak browserda tutulabilir browserda tutulacağı için sadece ekleyen kişi görür cash i temizlemediği sürece görür\n//2)**Kayıt işlemlerini htpp call yaparak veritabanına kaydedip servisten başarılı başarısız şeklinde bir responsive dönecek buna göre kullanıcıya bilgi verilecek (genelde kullanılan )\n\n\n  cities = [\n    {\n      id: 1,\n      name: \"İstanbul\",\n      region:\"Marmara\", //birbirinden bağımsız component olduğu için kapatıldı\n      plaka:34\n    },\n    {\n      id: 2,\n      name: \"İzmir\",\n      region:\"Ege\",\n      plaka:35\n    },\n    {\n      id: 3,\n      name: \"Ankara\",\n      region:\"Anadolu\",\n      plaka:6\n    },\n    {\n      id: 4,\n      name: \"Kütahya\",\n      region:\"Anadolu\",\n      plaka:43\n    },\n    {\n      id: 5,\n      name: \"Antalya\",\n      region:\"Akdeniz\",\n      plaka:7\n    },\n    {\n      id: 6,\n      name: \"Samsun\",\n      region:\"Karadeniz\",\n      plaka:55\n    }\n  ];\n\n  //1)Subject kullanarak  crud işlemlerinden sonra data yenileme\n  //Componentlerde yaşınılan data sorununu çözmek için: observable kullanacağız\n  //subject tanımlayacağız ve içerisine data atacağız, sonra servisten gelmiş http response gibi bu subjecte subscribe olup içindeki data handle edilecek\n  public cityNameSubject =new Subject<any>(); // http response gibi subscribe olabileceğimiz value\n  public cityPlakaSubject=new Subject<any>();\n  public cityRegionSubject=new Subject<any>();\n\n\n  //2)Behaviour Subject kullanarak  crud işlemlerinden sonra data yenileme\n  private cityNameDataSubject$:BehaviorSubject<any> = new BehaviorSubject([]);\n  cityNameDataSubject = this.cityNameDataSubject$.asObservable(); //servis tarafında observable a çevirirsem zaten dinlenecek  halde olduğu için kullanılabilir\n\n\n\n\n  constructor() { }\n\n   //Her component için ayrı ayrı metot yazılması gerekiyor\n\n   getCityNames()\n   {\n     const data= this.cities.map(elem=>({\n       id:elem.id,\n       name:elem.name\n     }));\n     //1) this.cityNameSubject.next(data); //next:  cityNameSubject sürekli değişebilen bir yapı, sürekli dinle burayı sürekli stream içinde datanın değeri değişebilir, bu yüzden subscribe ol dinle ve datanın değişkliğini ben kendim belirleyeceğim demek\n     //save de cities arrayi değiştiğinde burası tekrar tetiklenecek buradaki data citynamesubject sürekli değişmiş olacak\n      \n    this.cityNameDataSubject$.next(data); //cityNameDataSubject buna atılmaz bu observable olmuş hali zaten\n    }\n\n   getCityPlakas(){\n     const data=this.cities.map(elem=>({\n       id:elem.id,\n       name:elem.name,\n       plaka:elem.plaka\n     }));\n     this.cityPlakaSubject.next(data);\n   }\n\n   getCityRegions(){\n     const data=this.cities.map(elem=>({\n       id:elem.id,\n       name:elem.name,\n       region:elem.region\n     }));\n     this.cityRegionSubject.next(data);\n   }\n\n   save(value:city){ //value city elementinin içinde varsa update edecek, yok ise push ile ekleyecek\n     const index=this.cities.findIndex(el=>el.id === value.id);\n\n     if(index > -1)\n     {\n       this.cities[index]=value;\n     }\n     else{\n       this.cities.push(value);\n     }\n\n     //save olduktan sonra subjecte yeni dataları eklemek için metodları tekrar tetiklemek gerekiyor\n     this.getCityNames();\n     this.getCityPlakas();\n     this.getCityRegions();\n   }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "plaka",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "region",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "MapService",
            "id": "injectable-MapService-6d479769c1b0e1052ce0db1b2835e215",
            "file": "src/libs/services/map.service.ts",
            "properties": [
                {
                    "name": "cities",
                    "defaultValue": "[\n    {\n      id: 1,\n      name: \"İstanbul\",\n      region:\"Marmara\", //birbirinden bağımsız component olduğu için kapatıldı\n      plaka:34\n    },\n    {\n      id: 2,\n      name: \"İzmir\",\n      region:\"Ege\",\n      plaka:35\n    },\n    {\n      id: 3,\n      name: \"Ankara\",\n      region:\"Anadolu\",\n      plaka:6\n    },\n    {\n      id: 4,\n      name: \"Kütahya\",\n      region:\"Anadolu\",\n      plaka:43\n    },\n    {\n      id: 5,\n      name: \"Antalya\",\n      region:\"Akdeniz\",\n      plaka:7\n    },\n    {\n      id: 6,\n      name: \"Samsun\",\n      region:\"Karadeniz\",\n      plaka:55\n    }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "cityNameDataSubject",
                    "defaultValue": "this.cityNameDataSubject$.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "cityNameDataSubject$",
                    "defaultValue": "new BehaviorSubject([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<any>",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "cityNameSubject",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cityPlakaSubject",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cityRegionSubject",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCityNames",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCityPlakas",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCityRegions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "value",
                            "type": "city",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "city",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\n\ninterface city {\n  id:number;\n  name:string;\n  plaka:number;\n  region:string; //? => olmasa da olur demektir.\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MapService {\n//Servis üzerinden besleniyor plaka,region ve city\n//Servis mock datası kaydetmiyor sabit kalıcı datalar değildir, proje her reflesh olduğunda eklenen değişen datalar kaybolur .\n//Cities mock datadır ve servis mock datalarla bu sebeple kullanılmaz.\n//Sabit olarak kaydetmesi için 1)cities arrayini cookie ya da local storage olarak browserda tutulabilir browserda tutulacağı için sadece ekleyen kişi görür cash i temizlemediği sürece görür\n//2)**Kayıt işlemlerini htpp call yaparak veritabanına kaydedip servisten başarılı başarısız şeklinde bir responsive dönecek buna göre kullanıcıya bilgi verilecek (genelde kullanılan )\n\n\n  cities = [\n    {\n      id: 1,\n      name: \"İstanbul\",\n      region:\"Marmara\", //birbirinden bağımsız component olduğu için kapatıldı\n      plaka:34\n    },\n    {\n      id: 2,\n      name: \"İzmir\",\n      region:\"Ege\",\n      plaka:35\n    },\n    {\n      id: 3,\n      name: \"Ankara\",\n      region:\"Anadolu\",\n      plaka:6\n    },\n    {\n      id: 4,\n      name: \"Kütahya\",\n      region:\"Anadolu\",\n      plaka:43\n    },\n    {\n      id: 5,\n      name: \"Antalya\",\n      region:\"Akdeniz\",\n      plaka:7\n    },\n    {\n      id: 6,\n      name: \"Samsun\",\n      region:\"Karadeniz\",\n      plaka:55\n    }\n  ];\n\n  //1)Subject kullanarak  crud işlemlerinden sonra data yenileme\n  //Componentlerde yaşınılan data sorununu çözmek için: observable kullanacağız\n  //subject tanımlayacağız ve içerisine data atacağız, sonra servisten gelmiş http response gibi bu subjecte subscribe olup içindeki data handle edilecek\n  public cityNameSubject =new Subject<any>(); // http response gibi subscribe olabileceğimiz value\n  public cityPlakaSubject=new Subject<any>();\n  public cityRegionSubject=new Subject<any>();\n\n\n  //2)Behaviour Subject kullanarak  crud işlemlerinden sonra data yenileme\n  private cityNameDataSubject$:BehaviorSubject<any> = new BehaviorSubject([]);\n  cityNameDataSubject = this.cityNameDataSubject$.asObservable(); //servis tarafında observable a çevirirsem zaten dinlenecek  halde olduğu için kullanılabilir\n\n\n\n\n  constructor() { }\n\n   //Her component için ayrı ayrı metot yazılması gerekiyor\n\n   getCityNames()\n   {\n     const data= this.cities.map(elem=>({\n       id:elem.id,\n       name:elem.name\n     }));\n     //1) this.cityNameSubject.next(data); //next:  cityNameSubject sürekli değişebilen bir yapı, sürekli dinle burayı sürekli stream içinde datanın değeri değişebilir, bu yüzden subscribe ol dinle ve datanın değişkliğini ben kendim belirleyeceğim demek\n     //save de cities arrayi değiştiğinde burası tekrar tetiklenecek buradaki data citynamesubject sürekli değişmiş olacak\n      \n    this.cityNameDataSubject$.next(data); //cityNameDataSubject buna atılmaz bu observable olmuş hali zaten\n    }\n\n   getCityPlakas(){\n     const data=this.cities.map(elem=>({\n       id:elem.id,\n       name:elem.name,\n       plaka:elem.plaka\n     }));\n     this.cityPlakaSubject.next(data);\n   }\n\n   getCityRegions(){\n     const data=this.cities.map(elem=>({\n       id:elem.id,\n       name:elem.name,\n       region:elem.region\n     }));\n     this.cityRegionSubject.next(data);\n   }\n\n   save(value:city){ //value city elementinin içinde varsa update edecek, yok ise push ile ekleyecek\n     const index=this.cities.findIndex(el=>el.id === value.id);\n\n     if(index > -1)\n     {\n       this.cities[index]=value;\n     }\n     else{\n       this.cities.push(value);\n     }\n\n     //save olduktan sonra subjecte yeni dataları eklemek için metodları tekrar tetiklemek gerekiyor\n     this.getCityNames();\n     this.getCityPlakas();\n     this.getCityRegions();\n   }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 71
            },
            "type": "injectable"
        },
        {
            "name": "RoleService",
            "id": "injectable-RoleService-8e88b6c3c74aab54c8fb285848dc91dd",
            "file": "src/libs/services/role.service.ts",
            "properties": [
                {
                    "name": "connection",
                    "defaultValue": "environment.api.nestjs.role + \"/role\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [
                {
                    "name": "addRole",
                    "args": [
                        {
                            "name": "role",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "role",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteRole",
                    "args": [
                        {
                            "name": "role",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "role",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editRole",
                    "args": [
                        {
                            "name": "role",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "role",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllRoles",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { enableProdMode } from '@angular/core';\n\n//interface role{  //role bu şekilde de tanımlanabilir\n//  id:number, name:string\n//}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoleService {\n\n  connection = environment.api.nestjs.role + \"/role\"; //role servisindeki http i url i burasıdır. //Request url eklenmesi 1.yöntem : \"/role\"\n  constructor(private http: HttpClient) { }//http ye istek atıldı\n\n  getAllRoles() {\n    //2.yönetim her istekte eklenebilir: const apiUrl=this.connection +\"/role\";\n\n    return this.http.get<any>(this.connection); //this.connection => url çağırıldı\n    //get isteği yapılıyor componentte subscribe olunması gerekiyor çünkü burası bir observable değer gönderir\n\n    //Servise parametre vb. göndermek isteyebilir , sonradan oluşturduğumuz search parametresini bu şekilde bildirebiliriz\n    //return this.http.get<any>(this.connection, {search: }); //request param: genellikle listelerde yapılır , listenin 5.sayfasını istiyorum 10 luk 10 luk gönder gibi bilgileri göndermeye yarar.\n  }\n\n  addRole(role: any) { //http nin kendisi observable olarak dönülecek, subscribe component te olunacak\n\n    return this.http.post<any>(this.connection, role); //url den sonra bir body(bilgi) bekliyor.\n  }\n\n  //Http put isteği ile update işlemi\n  editRole(role: any) {\n    return this.http.put<any>(this.connection + `/${role.id}`, role); //domain /role/id , bu adrese gidip role value su vererek update işlemi yapılır.\n  }\n\n  //Http Delete isteği\n  deleteRole(role: any) {\n    //interface ile veri tipi belirtilebilir, any yerine\n    return this.http.delete<any>(this.connection + `/${role.id}`, role); //bana gelen value yu aynen geri gönderiyorum\n  }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TodoServiceService",
            "id": "injectable-TodoServiceService-888693f20fc0c92bb34878ae20129bf2",
            "file": "src/app/todo-service.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TodoServiceService {\n\n  constructor() { }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-c093aa5d0a8494431947d4fc40be330b",
            "file": "src/libs/services/user.service.ts",
            "properties": [
                {
                    "name": "connection",
                    "defaultValue": "environment.api.nestjs.role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isLoggedIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "users",
                    "defaultValue": "[\"didem\", \"ahmet\"]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "getAllUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string | any",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isExistName",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { of } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  users = [\"didem\", \"ahmet\"] //kullanıcıdan girmesini istemediğimiz kullanıcılar. Normalde api tarafında yapılır.\n\n  isLoggedIn = false; //canActivete Guard\n\n  connection = environment.api.nestjs.role;\n\n  constructor(private http: HttpClient) { }\n\n  isExistName(val: string) {\n    if (this.users.indexOf(val) > -1) //gönderdiğim value yu arayacak\n    {\n      return of(true); //of: her türlü değer ve değişkeni observable bir değere çevirir.Observable bir boolean a çeviriyor\n    }\n    else {\n      return of(false);\n    }\n  }\n\n\n  getAllUsers() {\n    return this.http.get<any>(this.connection + \"/user\");\n  }\n\n  // login(){//canActivete Guard\n  //   this.isLoggedIn=!this.isLoggedIn;\n  // }\n\n\n  //bir post isteği atarak servise login olup token ı almak istiyoruz\n  login() {\n    const user = {\n      email: \"didem@udemy.com.tr\",\n      password: \"11111\"\n    };\n    return this.http.post<any>(this.connection + \"/login\", user); //login servisine giderek user datasını gönderecek\n\n    //login işleminden geri dönen değer succces:true, value: token olmuş olacaktır.\n  }\n\n  logOut(){\n    localStorage.removeItem(\"token\"); //çalışınca token silinsin\n  }\n\n  getToken() :string | any{\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      return token;\n    }\n    else {\n      //token yoksa login işlemine gidip subscribe olduktan sonra data gelirse localStorage e kaydetsin\n      this.login().subscribe(data => {\n        localStorage.setItem(\"token\", data.value);\n        this.getToken(); //sonradan yine kendisine gitmesi lazım ki er ya da geç isteğimi karşılasın ve  token dönsün\n\n      });\n    }\n  }\n}\n\n\n//Login metodu yazarak login olduktan sonra token ı localstorage a kaydetsinve onun üzerinden interceptor orayı sorgulasın\n//eğer token varsa localstorage da kaydettiğim tokenı alsın yoksa bir login isteği atıp ordan dönen değeri buraya eklesin ve serviste artık istek atılabilsin\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthChildGuard",
            "id": "injectable-AuthChildGuard-6579a784360321dbd243302479aa0b41",
            "file": "src/libs/guards/auth-child.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivateChild",
                    "args": [
                        {
                            "name": "childRoute",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "childRoute",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivateChild, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { UserService } from '..';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthChildGuard implements CanActivateChild {\n\n  constructor(private userService: UserService) { }\n\n  canActivateChild(\n    childRoute: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot):\n     boolean {\n    return this.userService.isLoggedIn;\n\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "AuthExitGuard",
            "id": "injectable-AuthExitGuard-17d7fd9ecc7e1b9fc8d481a8939cf980",
            "file": "src/libs/guards/auth-exit.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canDeactivate",
                    "args": [
                        {
                            "name": "component",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentRoute",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentState",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nextState",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentRoute",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentState",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nextState",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanDeactivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { UserService } from '..';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthExitGuard implements CanDeactivate<unknown> {\n\n  constructor(private userService: UserService) { }\n\n  canDeactivate(\n    component: unknown,\n    currentRoute: ActivatedRouteSnapshot,\n    currentState: RouterStateSnapshot,\n    nextState?: RouterStateSnapshot):\n    boolean {\n    return !this.userService.isLoggedIn; //login var mı onu kontrol ederek true- false dönecek\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-65d3a5a5bb73ccab2a89bf01173d3790",
            "file": "src/libs/guards/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "next",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "next",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { UserService } from '..';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n   //user servisindeki login değişkenini dinlemek için constructor yazılır\n  constructor(private userService:UserService){}\n\n //canActivate: üzerinde serviste tuttuğum bir değerden kullanıcının  bu root a erişip erişemeyeceği kararını veren bir yapı kurulur.\n//restapi yi tetikler ve oradan gelen değere göre veri gelir\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): boolean{ //sadece boolean dönsün\n      //Snapshot: gideceği root un objelerinin buraya snap olarak kaydediyor ve kontroller sağlanır.(Console dan)\n      console.log(\"next\",next); //roota giderkende data ilettimi ,parametre ilettimi gösterir. \n      console.log(\"state\",state); //state: erişmek istediğim root , url, ve içerisindeki value , tree vb. mevcuttur\n\n      return this.userService.isLoggedIn; //isLoggedIn varsa true dönecek değilse false\n\n    //return true; //false dediğimizde sayfayı pasif yapar\n  }\n  \n \n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "AuthInterceptor",
            "id": "injectable-AuthInterceptor-e509a07cbc2c010dd16460b211735245",
            "file": "src/libs/interceptors/auth.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<>>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { UserService } from '../services/user.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(private userService: UserService) { }\n\n  //request i handle eden bir intercept metodu, bununla arasına girip manufulasyonu yapıp request i tamamlıyor\n  intercept(\n    request: HttpRequest<unknown>,\n    next: HttpHandler\n  ): Observable<HttpEvent<unknown>> {\n\n    //ilk başta login isteği atıldığında oda buradaki getToken a girecek ve sonsuz bir döngü oluşacak, interceptor eğer login url ine gidiyorsa bu işlemi yapmamalı\n    //ilk önce tokenı alsın sonra bu işlemi yapsın diye işlem yapıldı\n    if (request.url === \"https://udemy-nestjs-course.herokuapp.com/api/login\") {\n      return next.handle(request); //Request handle edilsin\n    }\n    else {\n      //request clone landı,{setHeaders:{Authorization : `Bearer customToken`},withCredentials:true} bu data ile manudule edildi\n      //artık servise gidecek her request headerıne Authorization  property sini ekleyip o şekilde iletilecek.\n\n      //this.userService.getToken() =>  token ı dönecek eğer yoksa login işlemine girecek http isteği atacak http isteğinde value yani token ı dönecek bunu localstorage e kaydedecek\n      //sonra tekrar kendisini çağıracak bu sefer token olacağı için token ı geri dönecek alınan token burada servise istek olarak yansıtılacak\n\n\n      request = request.clone({\n        setHeaders: { Authorization: `Bearer ${this.userService.getToken()}` }\n      });\n\n      return next.handle(request);\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [],
    "directives": [
        {
            "name": "HighlightDirective",
            "id": "directive-HighlightDirective-1dd074bc660c29f7adf7a3581d773486",
            "file": "src/libs/custom-directives/highlight.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, HostListener,Input } from '@angular/core';\n\n\n@Directive({\n  selector: '[appHighlight]' //selector: html de kullanıldı\n})\nexport class HighlightDirective {\n\n  //Custom Directive ile DOM daki elementin tüm özelliklerine erişilebilir. \n  //Custom Directive önemli özelliklerinden biriside dışarıdan değişken gönderilebilmesidir.\n\n\n  //4.örnek\n\n  @Input() highlightColor: string | undefined;\n\n  constructor(private el: ElementRef) {\n    // el.nativeElement.style.backgroundColor=this.highlightColor;\n   }\n\n\n   @HostListener(\"mouseenter\") onMouseEnter(){\n    this.el.nativeElement.style.backgroundColor=this.highlightColor;\n  }\n\n  @HostListener(\"mouseleave\") onMouseLeave(){\n    this.el.nativeElement.style.backgroundColor=this.highlightColor;\n }\n\n\n   //1.örnek:\n\n   //constructor(private el: ElementRef) {\n    //el.nativeElement.style.backgroundColor=\"orange\";\n  //}\n\n   //@HostListener(\"mouseenter\") onMouseEnter(){\n   //  this.highlight(\"gray\");\n   //}\n\n   //@HostListener(\"mouseleave\") onMouseLeave(){\n   // this.highlight(\"pink\");\n   //}\n\n   private  highlight(color: string){\n    this.el.nativeElement.style.backgroundColor=color;\n  }\n\n  //2.örnek:\n\n   // @HostListener(\"mouseenter\") onMouseEnter(){\n   //    this.makeInvisible(); //mouse enter olduğu zaman kaybolsun\n   //  }\n\n   //  @HostListener(\"mouseleave\") onMouseLeave(){\n   //   this.makeVisible(); //mouse gittiği zaman geri gelsin\n   // }\n   \n  \n   makeVisible(){\n     this.el.nativeElement.style=\"visibility:visible\";//mouse gittiği zaman geri gelsin\n   }\n\n   makeInvisible(){\n     this.el.nativeElement.style=\"visibility:hidden\";//mouse enter olduğu zaman kaybolsun\n   }\n\n    //3.örnek:\n\n   //@HostListener(\"mouseenter\") onMouseEnter(){\n   // this.makeBigger(); //mouse enter olduğu zaman büyük olsun\n  //}\n\n  //@HostListener(\"mouseleave\") onMouseLeave(){\n  // this.makeSmaller(); //mouse gittiği zaman küçük olsun\n //}\n\n   makeBigger(){\n    this.el.nativeElement.style=\"font-size:2rem\";//mouse gittiği zaman geri gelsin\n  }\n\n  makeSmaller(){\n    this.el.nativeElement.style=\"font-size:0.8rem\";//mouse enter olduğu zaman kaybolsun\n  }\n\n}\n",
            "selector": "[appHighlight]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "highlightColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string | undefined"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "highlight",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "makeBigger",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "makeInvisible",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "makeSmaller",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "makeVisible",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMouseEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseenter'"
                        }
                    ]
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave'"
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-84b75e86f0cb384a6046950213ee6ec0",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "spinner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgxSpinnerService",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "'udemy-angular-course'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "toastr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ToastrService",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "translateService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TranslateService",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setLanguage",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSpinner",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showSuccess",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { typeWithParameters } from '@angular/compiler/src/render3/util';\nimport { Component, OnInit } from '@angular/core';\nimport { ToastrService } from 'ngx-toastr';\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  title = 'udemy-angular-course';\n  constructor(\n    public toastr: ToastrService,\n    public spinner: NgxSpinnerService, //spinner intance ı oluşturuldu\n    public translateService: TranslateService\n  ) {\n    //proje çalışır çalışmaz default olarak ingilizce dosyayı çalıştıracak içerisindekileri alıp kontrol edecek ve yükleyecek\n    translateService.setDefaultLang('en');\n    translateService.use('en');\n  }\n\n  ngOnInit() {\n    this.showSuccess();\n    this.showSpinner();\n  }\n\n  showSuccess() {\n    //onLangChange : dil değişim ile subscribe olunur\n    this.translateService.onLangChange.subscribe(resp => {\n      const title=this.translateService.instant(\"toastr.title\");\n      const message=this.translateService.instant(\"toastr.message\");\n      this.toastr.success(title,message);\n\n      //Sabit gelen alan\n      //this.toastr.success(\n      //  'Udemy Angular 9 projemize hoşgelniz...!',\n       // 'Giriş Başarılı!'); //toastr gelir\n    });\n\n  }\n\n  showSpinner() {\n    this.spinner.show(); //Servise girerse bu çalışır.\n\n    setTimeout(() => {\n      this.spinner.hide(); //Servisten cevap dönene kadar kapama gerçekleşmez.\n    }, 5000)/**5 saniye sonra kapatıcak */\n  }\n\n\n  setLanguage(lang: string) {\n    this.translateService.use(lang);\n  }\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spinner",
                        "type": "NgxSpinnerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spinner",
                        "type": "NgxSpinnerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n<!--<div class=\"row\">  //div.row , row:bootstrap satırı olacağını belirtir\r\n  <div class=\"col-md-3\"> //div.col-1\r\n    <h2 routerLink=\"home\">go to Home</h2>  //Go To Home a tıkladığında home sayfasına gidecek\r\n  </div>\r\n  <div class=\"col-md-3\"> //col-md-4: bootstrap 12 ye bölüyor, 4 4 4 ayrıldı\r\n    <h2 routerLink=\"role\">go to Role</h2>\r\n  </div>\r\n  <div class=\"col-md-3\">\r\n    <h2 routerLink=\"user\">go to User</h2>\r\n  </div>\r\n  <div class=\"col-md-3\">\r\n    <h2 [routerLink]=\"['user',5]\">go to 5 detail</h2> //user detail a gidebilmek için parametre verilmesi lazım [routerLink] , 7 id değeri\r\n  </div>\r\n</div> -->\r\n\r\n<!--lang yani input olarak translateService in aktif dili gönderiliyor currentLang-->\r\n<!--output olarak langChange, onSelection ı yakalamak için event yazıldı-->\r\n<app-navbar [lang]=\"translateService.currentLang\" (langChange)=\"setLanguage($event);\"></app-navbar> <!--hangi route a giderse görünecek-->\r\n\r\n<div class=\"row\">\r\n  <div class=\"col-md-3\">\r\n    <app-sidebar></app-sidebar>\r\n   <!-- <ul>\r\n       <li routerLink=\"home\">\r\n          Home\r\n       </li>\r\n       <li routerLink=\"role\">\r\n          Role\r\n       </li>\r\n       <li routerLink=\"user\">\r\n          User\r\n      </li>\r\n      <ul>\r\n        <li [routerLink]=\"['user',5]\">\r\n          User 5 Detail\r\n        </li>\r\n        <li [routerLink]=\"['user',5,'role']\">\r\n          User 5 Role\r\n        </li>\r\n      </ul>\r\n     </ul>-->\r\n  </div>\r\n  <div class=\"col-md-9\">\r\n   <!--1.yöntem:--> <router-outlet></router-outlet><!--Bulunduğum url bir route a gidecekse ordaki route yansıtacak alandır -->\r\n<!--Üzerine tıklanarak çağırılan componentin template i router outlet tag ine geliyor.-->\r\n<!--Veya router a gerek kalmadan home.component.ts deki selector olan app-home ile çağrılabilir-->\r\n<!--2.yöntem:<app-home></app-home> ancak tek tek çağırmak doğru olmayacağı için router kullanılır.-->\r\n\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n\r\n     <!--spinner tag i eklendi-->\r\n     <ngx-spinner\r\n     bdColor=\"rgba(51,51,51,0.8)\"\r\n     size=\"medium\"\r\n     color=\"#fff\"\r\n     type = \"pacman\"\r\n     [fullScreen]=\"true\"\r\n     >\r\n     <p style=\"font-size: 20px; color: white\">Loading...</p>\r\n     </ngx-spinner>\r\n\r\n     \r\n \r\n\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "What background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 322,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "Button contents",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string"
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Is this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "How large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-81ba9f639be89bf894ffb0a38ed0469d-1",
            "file": "src/app/storybook/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "text",
                    "defaultValue": "\"default\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss']\n})\nexport class ButtonComponent implements OnInit {\n\n  @Input() text:string =\"default\"; //Bir string göndermezse default yazsın\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1",
            "templateData": "<button igxButton=\"flat\">{{text}}</button>\n<button igxButton=\"raised\">{{text}}</button>\n<button igxButton=\"outlined\">{{text}}</button>\n"
        },
        {
            "name": "Child1Component",
            "id": "component-Child1Component-8d3f63e55a6e851da742a6fd73056823",
            "file": "src/libs/child-components/child1/child1.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-child1",
            "styleUrls": [
                "./child1.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./child1.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "resetForm",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "alertSth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "emitForm",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-child1',\n  templateUrl: './child1.component.html',\n  styleUrls: ['./child1.component.scss']\n})\nexport class Child1Component implements OnInit {\n  //Child componentten verinin aktarımı için @Input\n //@Input() nameVal: string | undefined;//componentin bir input alacağı belirtiliyor, kesinlikle bir value olacak gelmezse bir şey göstermeyecek bu da string olacak\n //@Input('name') name: string | undefined;  yazımında ('name') : parent ta nasıl vereceğimize, name: bu componentin(child) içerisinde ne olarak göstereceğimizi belirtir\n \n @Input() data: any ;\n\n\n//Child componentten parent componente bilgi aktarımı sağlanacak @Output\n @Output() resetForm: EventEmitter<any> = new EventEmitter() ; //EventEmitter<name,id,vb.> şeklinde de tipler belirtilebilir ;\n//Output tetiklendiği zaman parent1 componenti haberdar olsun\n//EventEmitter sınıfı sayesinde özel olaylar tanımlayarak, tanımladığınız bu olayları istediğiniz zaman tetikleyebilirsiniz.\n\n\n\n\n constructor() { }\n\n  ngOnInit(): void {}\n\n  emitForm(event: any){\n    this.resetForm.emit(event); //click gibi çalışabilmesi için event Emit edilecek\n  }\n\n  alertSth(){\n    alert(\"You have reached the child component(Child Component'i tetiklediniz.\");\n    console.log(\"You have reached the child component(Child Component'i tetiklediniz.\");\n    this.data={ //istenilen şekilde input ta yönlendirilebiliyor, bu componentin içerisinde ne varsa dataları parent componentten manufule edilebilir\n      name:\"triggered !!\", \n      status:false\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./child1.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!--<p>Child 1 Component</p>\nGelen Name Sonuç: {{nameVal}} \n<br/>\nGelen Data Sonuç: {{data | json}} -->\n\n<!--düzgün gelmesi için-->\n<div *ngIf=\"data\"> <!--data varsa çalışsın-->\n    {{data?.name}} kişisi <!--data?.name => data varsa name ini al demektir.-->\n<p *ngIf=\"data?.status\"> Başarılıdır. </p>  <!--*ngIf=\"data?.status\" => datanın statüsü true ise-->\n<p *ngIf=\"!data?.status\"> Başarısızdır. </p>\n</div>\n<!--Burada yapılan her değişiklik parent1.component html e yansıyacaktır-->\n\n\n<!--<button (click)=\"emitForm($event)\">RESET!</button>--><!--1.yöntem--><br/>\n<button style=\"background-color: rgb(92, 236, 188); color: slateblue;  margin-left: 1px;\" (click)=\"resetForm.emit(data.name)\">RESET!</button><!--2.yöntem-->"
        },
        {
            "name": "CityComponent",
            "id": "component-CityComponent-b3dc4ca639446a75d174ce944313d4b6",
            "file": "src/app/map/city/city.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-city",
            "styleUrls": [
                "./city.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./city.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "citiesData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "citiesData$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MapService } from 'src/libs';\nimport { PlakaComponent } from '../plaka/plaka.component';\n\n@Component({\n  selector: 'app-city',\n  templateUrl: './city.component.html',\n  styleUrls: ['./city.component.scss']\n})\nexport class CityComponent implements OnInit {\n  //Bir işlem gerçekleştiğinde kaydettiğim düzenlediğim datalar kaybolmaması için servise ihtiyaç duyulmaktadır.\n\n  //Şehirlerde yaptığım değişiklikte Plakalar ve Bölgeler etkilenmiyor bunun için ViewChild eklenebilir ama her componenti birbirine bağlamak uzun bir iş olacağı için service kullanılması doğru olacaktır.\n  //@ViewChild('PlakaComponent') plakaCmp:PlakaComponent | undefined\n\n\n  //cities = [\n  //  {\n  //    id: 1,\n  //    name: \"İstanbul\",\n  //region:\"Marmara\", //birbirinden bağımsız component olduğu için kapatıldı\n  //plaka:34\n  //  },\n  //  {\n  //    id: 2,\n  //    name: \"İzmir\",\n  //region:\"Ege\",\n  //plaka:35\n  //  },\n  //  {\n  //    id: 3,\n  //    name: \"Ankara\",\n  //region:\"Anadolu\",\n  //plaka:6\n  //  },\n  //  {\n  //    id: 4,\n  //    name: \"Kütahya\",\n  //region:\"Anadolu\",\n  //plaka:43\n  //  },\n  //  {\n  //     id: 5,\n  //     name: \"Antalya\",\n  //region:\"Akdeniz\",\n  //plaka:7\n  //  },\n  //  {\n  //    id: 6,\n  //    name: \"Samsun\",\n  //region:\"Karadeniz\",\n  //plaka:55\n  // }\n  //];\n\n  //cityId = 0;\n  //cityName = \"\";\n\n  citiesData: any; //observable sürekli dinlenebilen bir data olsaydı map servisteki cities verisini değiştirsem burada da gösterebilecekti.\n\n  citiesData$;\n\n  constructor(private mapService: MapService) {//map.module deki provide instance ı kullanmak için yazıldı\n\n    //1) mapService.cityNameSubject.subscribe(data=>{//data handle edildi\n    //   this.citiesData=data; //cityNameSubject değişirse data da değişeceği için cities anlık değişecek\n    //});\n\n    this.citiesData$=mapService.cityNameDataSubject;\n\n  }\n\n  ngOnInit(): void {\n\n    this.mapService.getCityNames(); //getCityNames id ve name dönüyor\n    //çalıştığı zaman citiesData yı doldursun,  başka hiç bir zaman haberleşme sağlamasın denildi, datanın dğeişip değişmediği sorgulanmıyor\n  }\n\n  //save() { //id si varsa update etsin yoksa kaydetsin\n  //  const index = this.cities.findIndex(el => el.id === this.cityId);\n  //  if (index > -1) {\n  //        this.cities[index]={id:this.cityId,name:this.cityName}; //update\n  //  }\n  //  else {\n  //    this.cities.push({id: this.cityId, name: this.cityName}); //kaydediyor\n  //  }\n  // }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./city.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div style=\"margin:2rem;\">\n    <div class=\"row\">\n        <h3>Şehirler</h3>\n        <div class=\"col-md-12\" *ngIf=\"citiesData$ | async as cityNameData\"> <!--async ile doğrudan html de subscribe olmuş gibi davranıyor -->\n            <!--async ile gelen observable dataya subscribe olup cityNameData burada işlemleri görür-->\n            <ul>\n                <li *ngFor=\"let city of cityNameData\">\n                    {{city.id}} - {{city.name}}\n                </li>\n            </ul>\n        </div>\n    </div>\n  <!-- <div class=\"col-md-12\">\n        id: <br/> <input type=\"number\" [(ngModel)]=\"cityId\"><br />\n        new name: <br/> <input type=\"text\" [(ngModel)]=\"cityName\"><br /><br />\n        <button (click)=\"save()\">Kaydet</button>\n    </div>-->\n</div>"
        },
        {
            "name": "CookieComponent",
            "id": "component-CookieComponent-7c97b40c0bc6fcd5eaa2e125088779d5",
            "file": "src/app/storage/cookie/cookie.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cookie",
            "styleUrls": [
                "./cookie.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cookie.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cookieValue",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "isCookieExist",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | undefined",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "name",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "checkNameCoookie",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setItem",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Component({\n  selector: 'app-cookie',\n  templateUrl: './cookie.component.html',\n  styleUrls: ['./cookie.component.scss']\n})\nexport class CookieComponent implements OnInit {\n\n  name=\"\";\n  cookieValue=\"\";\n\n  isCookieExist: boolean | undefined;\n\n  constructor(private cookieService: CookieService) { }\n\n  ngOnInit(): void {\n  }\n\n  setItem(value: string){ //cookie serviside key,value şeklinde çalışır\n     this.cookieService.set(\"name\",value);\n  }\n\n  getItem(){\n    this.cookieValue=this.cookieService.get(\"name\");\n  }\n\n  clearItem(){\n    this.cookieService.delete(\"name\");\n  }\n\n  clearAll(){\n    this.cookieService.deleteAll();\n  }\n\n  checkNameCoookie(){\n     //check() : cookie nin olup olmadığını öğrenmek için kullanılır.\n    this.isCookieExist=this.cookieService.check(\"name\"); //true olunca name cookie min olduğunu görüyor\n  }\n\n  //LAX ile aynı domain uzantısına sahip olan cookileri içerebiliyoruz (sub domainleri set edebilmek için kullanılır.)\n  //local-storage ve cookie client sayfalarda kullanılır, kısa veya uzun vadeli data saklamak için kullanılır, bir veritabanında saklanmak istemiyorsa\n  \n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./cookie.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cookieService",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "cookieService",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div style=\"margin:2rem;\">\n    <div class=\"row\">\n        <div class=\"col-md-5\">\n            <input type=\"text\" [(ngModel)]=\"name\" />\n            <br><br>\n            <button (click)=\"setItem(name);\">set Item</button>\n            <button (click)=\"getItem()\">get Item</button><br><br>\n            <button (click)=\"clearItem()\">cler Name Item</button><br><br>\n            <button (click)=\"clearAll()\">clear All</button><br><br>\n            <button (click)=\"checkNameCoookie()\">check Name Coookie</button><br><br>\n            <br>\n            <p>Name: {{name}}</p>\n            <p>Cookie Value: {{cookieValue}}</p>\n            <p>isExist: {{isCookieExist}}</p>\n        </div>\n        <div class=\"col-md-2\">\n            <br><br>\n            <button [routerLink]=\"['../local-storage']\">Go To Local Storage Page</button>\n        </div>\n    </div>\n</div>\n\n"
        },
        {
            "name": "DataBindingComponent",
            "id": "component-DataBindingComponent-50a3c8ebc42f8b36021e600cf2a8cc85",
            "file": "src/app/data-binding/data-binding.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-data-binding",
            "styleUrls": [
                "./data-binding.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./data-binding.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "type",
                    "defaultValue": "\"text\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "user",
                    "defaultValue": "{ //user objesi\n    name: \"Didem\",\n    surname: \"Girgin\",\n    job: \"Software Developer\",\n    favorite_place: \"Deniz\",\n    favorite_place_image: \"https://upload.wikimedia.org/wikipedia/commons/5/56/AntalyaSunset.JPG\",\n    isEditable: true\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "buttonClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "inputSubmit",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-data-binding',\n  templateUrl: './data-binding.component.html',\n  styleUrls: ['./data-binding.component.scss']\n})\nexport class DataBindingComponent implements OnInit {\n\n  user = { //user objesi\n    name: \"Didem\",\n    surname: \"Girgin\",\n    job: \"Software Developer\",\n    favorite_place: \"Deniz\",\n    favorite_place_image: \"https://upload.wikimedia.org/wikipedia/commons/5/56/AntalyaSunset.JPG\",\n    isEditable: true\n  };\n\n  type=\"text\";\n\n  constructor() { }\n\n  ngOnInit(): void { }\n\n  buttonClicked(){\n    alert(\"clicked\");\n  }\n\n  inputSubmit(value:any){\n   //console.log(value);\n    alert(value.target.value + \" geldi..\");\n  }\n\n  //changeEditable(){\n  //  this.user.isEditable =! this.user.isEditable; //toglle ladı\n  //}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".red{\r\n    color:red;\r\n}",
                    "styleUrl": "./data-binding.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>data-binding works!</p>\n<!--Angular da data binding 2 kısım olarak ayrılmaktadır\nTek Yönlü(one way) ve İki Yönlü(two way) olarak \nTek Yönle data bingding : ikiye ayrılır html den type script katmanına ya da type scriptten html katmanına\ncomponent to dom veya dom to component denilir kavram olarak-->\n\n<div class=\"row\">\n    <div class=\"col-md-12\">\n         <h2>One Way Binding <span style=\"font-size: 0.9rem;\"> from Component to Dom</span></h2>\n         <div class=\"row\">\n             <div class=\"col-md-2\">\n                 <h3>Interpolation</h3>\n                 <!--Interpolation: Objelerdeki(data-binding.component.ts de bulunan user) datayı html e aktarma imkanı sağlar-->\n                 <p> Ad : {{user.name}}, Soyad : {{user.surname}}  </p>\n                 <p> Hesaplama : {{1+2}}</p>\n                 <div>\n                     <img \n                     height=\"120px\" \n                     src=\"{{user.favorite_place_image}}\" \n                     alt=\"favorite_place_image\">\n                 </div>\n             </div>\n             <div class=\"col-md-3\">\n                 <h3>Property Binding</h3>\n                 <!--Property Binding: Html taglerimizin değelerini component ten gönderebilmeye yarar.\n                [value] - köşeli paratez bu propertye data göndereceğim anlamına gelir-->\n                 <input [type]=\"type\" [value]=\"user.job\">\n             </div>\n             <div class=\"col-md-3\">\n                   <h3>Attribute Binding</h3>\n                   <!--Attribute Binding: Angular one way binding de componentten dom a componentin attribute ünü değiştirebilecek değeler verebilir\n                   Sabit değerler vermek yerine değişkenlerle yönetim imkanı sağlıyor -->\n                   <input \n                   [type]=\"type\" \n                   [value]=\"user.job\" \n                   [attr.disabled]=\"!user.isEditable ? 'disabled' : null\"><!--user.isEditable true ise disabled ekle değilse null ekle-->\n                   <!--attr.disabled=\"disabled\"(sabit değer) yazılsaydı değişme durumunda bunu tetikleyemezdi bu sebeple buraya koşul koyuldu-->\n             </div>\n             <div class=\"col-md-2\">\n                 <h3>Class Binding</h3>\n                 <!--Class Binding: Angular componentin class ındaki değerin olup olmamasına karar verebiliyor, type script üzerinden-->\n                 <!--<p class=\"red\"> Renk Değeri!!</p>-->\n                 <!--Kullanıcının ismi Didem se kırmızı değilse default rengi neyse o olacak -->\n                 <!--<p [class.red]=\"user.isEditable\">Renk Değeri</p> veya -->\n                 <!--<p [class.red]=\"!user.isEditable ? true : false\">Renk Değeri</p> //boolean değer-->\n                 <p [class.red]=\"user.name=='Didem' ? true : false\">Renk Değeri</p>\n             </div>\n             <div class=\"col-md-2\">\n                 <h3>Style Binding</h3>\n                 <!--Style Binding: stillerde de koşula göre işlem yapılması sağlanmaktadır.-->\n                 <!--<p style=\"color : blue\" >Style Color</p> -->\n                 <!--Bir değere göre değişmesi için:-->\n                 <p [style.color]=\"user.name=='Didem' ? 'orange' : 'blue'\">Style Color</p>\n             </div>\n         </div>\n    </div>\n\n    <div class=\"col-md-12\">\n        <h2>\n            One Way Binding\n            <span style=\"font-size: 0.9rem;\">from DOM to Component</span>\n        </h2>\n        <div class=\"row\">\n            <div class=\"col-md-2\">\n                <h3>Event Binding</h3>\n                <!--Event Binding: Vereceğimiz component ten oluşacak eventi angular component in type script dosyasına haberdar edilmesi gerekiyor.\n                Componentteki html deki her componentin bir eventi var ve o event ile component teki bir metod veya işlem tetiklenebiliyor.-->\n                <input type=\"text\" [value]=\"user.name\" (keyup.enter)=\"inputSubmit($event)\"> <!--($event) //Tetiklenen componentin eventini gönderecek-->\n                <button (click)=\"buttonClicked();\">OK!</button>\n            </div>\n         </div>\n    </div>\n<!--Two Way Binding: Hem dom dan hem componentten birbirleri arasında anlık iletişim kurabilmesini sağlar.-->\n<div class=\"col-md-12\">\n    <h2>\n        Two Way bingding\n    </h2>\n    <div class=\"row\">\n        <div class=\"col-md-2\">\n            <h3>ngModel</h3>\n            <!--ngModel: Componentteki(data-binding.component.ts) değeri html deki componentin value suna eşitleyip iletişim kurdurabiliyor.\n            input içerisinde yazan Didem adını sildiğimde her yerden silmiş oluyorum, tüm değerler anlık olarak değişiyor\n            ngModel ile bütün property ler değişiyor, istenilen bir değeri hem componentte hem domda değiştirip diğer yerler tetiklenebilir,\n            genel de formlarda kullanılır bir input değerini değiştirildiğinde kaydet e basıldığında tek tek göndermek yerine modülde veriler tutulduğu için değer alınabilir-->\n            <input type=\"text\" [(ngModel)]=\"user.name\" />\n            <p>{{user.name}}</p>\n        </div>\n    </div>\n</div>\n\n</div>"
        },
        {
            "name": "DirectivesComponent",
            "id": "component-DirectivesComponent-31233b161779e00a37d778f577aa9a33",
            "file": "src/app/directives/directives/directives.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-directives",
            "styleUrls": [
                "./directives.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./directives.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cities",
                    "defaultValue": "[\n    {\n      id:1,\n      name:\"İstanbul\",\n      region:\"Marmara\"\n    },\n    {\n      id:3,\n      name:\"İzmir\",\n      region:\"Ege\"\n    },\n    {\n      id:6,\n      name:\"Samsun\",\n      region:\"Karadeniz\"\n    },\n    {\n      id:9,\n      name:\"Antalya\",\n      region:\"Akdeniz\"\n    }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "color",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "name",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "title",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "username",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "changeTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { TitleCasePipe } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-directives',\n  templateUrl: './directives.component.html',\n  styleUrls: ['./directives.component.scss']\n})\nexport class DirectivesComponent implements OnInit {\n\n  title=false;\n  name=\"\";\n  username=\"\";\n\n  color=\"\";\n\n  cities=[\n    {\n      id:1,\n      name:\"İstanbul\",\n      region:\"Marmara\"\n    },\n    {\n      id:3,\n      name:\"İzmir\",\n      region:\"Ege\"\n    },\n    {\n      id:6,\n      name:\"Samsun\",\n      region:\"Karadeniz\"\n    },\n    {\n      id:9,\n      name:\"Antalya\",\n      region:\"Akdeniz\"\n    }\n  ]\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  changeTitle(){\n    this.title=!this.title;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".red{\r\n    color:rgb(211, 59, 59);\r\n}\r\n\r\n.blue{\r\n    color:rgb(108, 132, 238);\r\n}\r\n.purple{\r\n    color:purple;\r\n}",
                    "styleUrl": "./directives.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 38
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"d-flex justify-content-center\">\n    <h2>Angular Directives</h2>\n</div>\n\n<h3>Structual Directives</h3>\n\n<div class=\"row\">\n    <div class=\"col-md-4\">\n        <h4>*ngIf</h4>\n        \n        <!--ngIf: sadece boolean değerlerde değil anlık olarak two way binding de de ngIf directive tetiklenebilir -->\n        <input type=\"text\" [(ngModel)]=\"name\">\n\n        <!--ngIf : componentimdeki title a bakıyor,bu elementin dom üzerinde olup olmamasına karar veriyor-->\n        <p *ngIf=\"title\">Title var..</p> <!--DOM um paragraf elementini tanıyor-->\n\n        <p *ngIf=\"name == 'Didem'\">isim Didem</p>\n\n        <!--Belirli bir bilgiye göre aktif ya da pasif yani DOM da yok veya var etme işlemi-->\n        <button (click)=\"changeTitle();\">toggle</button>\n        <br>\n\n        <!--ngIf lerde template leri değiştirebiliyoruz-->\n        <div *ngIf=\"title; then titleExist; else titleNotExist;\"> </div><!--eğer title varsa ve yoksa-->\n        <!--angular bir blok çalıştırıyor hangi tag li template in var olması gerektiğine karar veriyor-->     \n        <ng-template #titleExist>Title var template</ng-template> <!--oluşturulan custom template leride ngIf directory ile kontrol ve manufule edilebiliyor -->\n        <ng-template #titleNotExist>Title yok template</ng-template>\n    </div>\n\n\n    <div class=\"col-md-4\">\n        <h4>*ngSwitch</h4>\n\n        <input type=\"text\" [(ngModel)]=\"username\">\n        <!--Hepsi gözükmesin sadece biri gözüksün istenirse-->\n        <ul [ngSwitch]=\"username\">\n            <li *ngSwitchCase=\"'Didem'\">Hello Didem</li> <!--Username Didem se burası çalışsın-->\n            <li *ngSwitchCase=\"'Kerem'\">Hello Kerem</li>\n            <li *ngSwitchDefault>Hello Everyone</li>\n        </ul>\n    </div>\n\n\n    <div class=\"col-md-4\">\n        <h4>*ngFor</h4>\n        <ul>\n            <!--directives.component.ts de oluşturduğum cities array ini döngü olarak göstermek istersek-->\n            <li *ngFor=\"let city of cities;let i=index\"><!--let i=index => index i tutar,let city of cities => döngüde neyi dönmek istediğimi tutar-->\n                index: {{i}}<!--indexi-->\n                id: {{city.id}}\n                name: {{city.name}} \n                region: {{city.region}}\n            </li>\n        </ul>\n    </div>\n</div>\n\n\n<h3>Attrabute Directives</h3>\n\n<div class=\"row\">\n    <div class=\"col-md-4\">\n        <h4>[ngClass]</h4>\n         <!--ngClass : elemenlerin classlarını değişkenlere göre değiştirebilmeye ,yönlendirmeye,manufule etmeye yarar-->\n        <!--rengini value ya göre değiştireceğiz-->\n        <input type=\"text\" [(ngModel)]=\"color\" />\n        <p [ngClass]=\"color ==='red' ? 'red' : 'blue'\">Renk</p><!--directives.component.scss e .red eklendi-->\n       \n        <!--color ın kırmızı olmasını istenirse red classına, mavi olması istenirse blue classına atması sağlandı-->\n        <p [ngClass]=\"{\n             red:color ==='red', \n             blue:color==='blue'\n        }\">Yeni Renk</p>\n    </div>\n\n    \n    <div class=\"col-md-4\">\n        <h4>[ngStyle]</h4>\n        <input type=\"text\" [(ngModel)]=\"color\" />\n         <!--Yazılan renge dönüşsün işlemi-->\n        <p [ngStyle]=\"{color: color }\">Style Renk</p> <!--color variable ına bağladım-->\n        <p [ngStyle]=\"{color: color ==='Didem' ? 'red' : 'blue' }\">Style Yeni Renk</p> <!--if else ile de yapılabilir-->\n    </div>\n</div>\n\n\n\n    <h3>Custom Directives</h3>\n    <!--Custom Directives: Html elementlerimize attribute direvtive gibi custom bir şekilde kendi isteğimiz doğrultusunda hareket etmemizi sağlar\n    elementref leri dinlemek için özellikle custom directive ler kullanılır. -->\n<div class=\"row\">\n    <div class=\"col-md-6\">\n        <p appHighlight>Highlight Directive Works!</p>\n\n        <p appHighlight [highlightColor]=\"'yellow'\">Yellow Custom Directive</p><!--[highlightColor] => değişken -->\n        <p appHighlight highlightColor=\"orange\">Orange Custom Directive</p> <!--highlightColor => string -->\n    </div>\n</div>"
        },
        {
            "name": "FormsComponent",
            "id": "component-FormsComponent-218e128269ca06e52522e29e6ad495a6",
            "file": "src/app/forms/forms/forms.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-forms",
            "styleUrls": [
                "./forms.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forms.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-forms',\n  templateUrl: './forms.component.html',\n  styleUrls: ['./forms.component.scss']\n})\nexport class FormsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./forms.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>forms works!</p>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-0368ba31f32dcbd90cb54a0bd661b89c",
            "file": "src/app/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>home works!</p>\n\n<button igxButton=\"flat\">Welcome to Home Component</button>\n\n<p>{{\"app.title\" | translate}} </p>"
        },
        {
            "name": "LocalStorageComponent",
            "id": "component-LocalStorageComponent-4430e4f2a7946951b9b527c568c3a610",
            "file": "src/app/storage/local-storage/local-storage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-local-storage",
            "styleUrls": [
                "./local-storage.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./local-storage.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "localStorageObjVal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "localStorageVal",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "name",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "objAge",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "objName",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "objSurname",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "clearAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getObject",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setItem",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setObject",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-local-storage',\n  templateUrl: './local-storage.component.html',\n  styleUrls: ['./local-storage.component.scss']\n})\nexport class LocalStorageComponent implements OnInit {\n\n  \n//Cookie & Local Storage\n//Tarayıcı üzerinde verileri saklama , angularda server side değil client side olduklarından dolayı\n//angular projesinde bir veriyi iki şekilde saklanabilir, Local storage için saklama alanı 4 mb \n//server side tarafında bir uygulamanın sadece cookilere erişim sağlayabiliyor,\n//cookiye set ederken bir domain belirtilir ve bu domain sayesinde  servisimiz(REST API) tarayıcımızdaki bu veriye erişim sağlayabiliyor.\n//Servisiminiz veya server side tarafının bu dataya erişmesini istiyorsak cookie olarak set etmeliyiz,\n//Erişmesine gerek yok ise local storage nin set edilmesi gerekir.\n//Local storage string ve sabit datalar hariç obje de kaydedilebilir.\n\n  name=\"\";\n  localStorageVal: any=\"\"; \n  localStorageObjVal: any;\n\n  objName=\"\"; //variable tanımladım\n  objSurname=\"\";\n  objAge=\"\";\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  setItem(value: string){\n      localStorage.setItem(\"name\",value); //localStorage: Kayıtları key ve value şeklinde kaydetmemiz gerektiğini söyler , key olarak name, value value\n  }\n\n  getItem(){\n    this.localStorageVal = localStorage.getItem(\"name\"); //set ettiğimiz key in value sunu localStorageVal değerine eşitliyoruz\n  //2.kere get dediğimizde gider çünkü key deki value ya bakıyor(name) value nun kalktığını görüyor tekrar eşitleyip boş değer geliyor\n  }\n\n  clearItem(){\n   localStorage.removeItem(\"name\");\n  }\n  \n  clearAll(){\n    localStorage.clear();\n  }\n\n  //objeyi set edebileceğim bir metot tanımlıyoruz\n  setObject(){\n    //tıkladığımızda set edeceğimiz için ekstra bir parametre göndermiyoruz\n    const obj= {name:this.objName,surname:this.objSurname,age:this.objAge};\n    localStorage.setItem(\"object\",JSON.stringify(obj)); //Json a çevirip kaydedebiliyoruz.\n  }\n\n  getObject(){\n   this.localStorageObjVal=localStorage.getItem(\"object\");\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./local-storage.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 26
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div style=\"margin:2rem\">\n    <div class=\"row\">\n        <div class=\"col-md-5\">\n         <input type=\"text\" [(ngModel)]=\"name\" />\n         <br/>\n         <!--event binding ile metotları call edeceğiz (LocalStorageComponent.ts alanındaki metotlar)-->\n         <br/>\n         <button (click)=\"setItem(name);\">set Item</button> <!--name de şuan değer olmadığı için componentteki değeri gönderecek-->\n         <button (click)=\"getItem();\">get Item</button>\n         <button (click)=\"clearItem();\">clear name Item</button>\n         <br/>\n         <br/>\n        <p>ng model: {{name}}</p> <!--ne yazarsam burada görünsün-->\n        <p>local Storage value: {{localStorageVal}}</p> <!--Sadece string, get edilen değeri interpolation la gösteriyoruz-->\n        </div>\n\n        <!--object verileri getirme-->\n        <div class=\"col-md-6\">\n            name: <input type=\"text\" [(ngModel)]=\"objName\"> <br>\n            surname: <input type=\"text\" [(ngModel)]=\"objSurname\"> <br>\n            age: <input type=\"text\" [(ngModel)]=\"objAge\"> <br><br>\n            <button (click)=\"setObject();\">Set Object</button> <br><br>\n            <button (click)=\"getObject();\">Get Object</button> <br><br>\n            <p>Object Value: {{localStorageObjVal}}</p>\n        </div>\n    </div>\n\n    <!--Cookie ye geçilecek alan-->\n    <div class=\"col-md-2\">\n         <button [routerLink]=\"['../cookie']\">Go To Cookie Page</button>\n    </div>\n</div>\n\n\n"
        },
        {
            "name": "MapComponent",
            "id": "component-MapComponent-baa5561a6910fad18c85d300528b5527",
            "file": "src/app/map/map/map.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-map",
            "styleUrls": [
                "./map.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./map.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { MapService } from 'src/libs';\n\n@Component({\n  selector: 'app-map',\n  templateUrl: './map.component.html',\n  styleUrls: ['./map.component.scss']\n})\nexport class MapComponent implements OnInit {\n  //map componenti map rootuna gittiği zaman sadece map çalışsın bu map içerisine city,plaka,region manuel eklenmesi istediği için açıldı\n  \n  //Eklendikten sonra componentlerin tetiklenmesi için servisten değiştirdiğimiz datayı dinleyebilecek bir component yapısıdır.\n  \n  constructor(private mapService: MapService) { }\n  \n  ngOnInit(): void {\n  }\n\n  save(form: NgForm) {\n    this.mapService.save(form.value);\n\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./map.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\" style=\"margin: 2rem\">\n    <div class=\"col-md-9 offset-md-4\">\n        <form class=\"form-group\" #cityForm=\"ngForm\" (ngSubmit)=\"save(cityForm)\">\n            <div class=\"row\">\n                <div class=\"col-md-12 form-control\">\n                    <label for=\"id\">Id</label>\n                    <input type=\"number\" name=\"id\" ngModel>\n                </div>\n                <div class=\"col-md-12\">\n                    <label for=\"name\">Name</label>\n                    <input type=\"text\" name=\"name\" ngModel>\n                </div>\n                <div class=\"col-md-12\">\n                    <label for=\"region\">Region</label>\n                    <input type=\"text\" name=\"region\" ngModel>\n                </div>\n                <div class=\"col-md-12\">\n                    <label for=\"plaka\">Plaka</label>\n                    <input type=\"number\" name=\"plaka\" ngModel>\n                </div><br/>\n                \n            </div>\n            <button type=\"submit\">Kaydet</button>\n        </form>\n    </div>\n    <div class=\"col-md-4\">\n        <app-city></app-city>\n    </div>\n    <div class=\"col-md-4\">\n        <app-plaka></app-plaka>\n    </div>\n    <div class=\"col-md-4\">\n        <app-region></app-region>\n    </div>\n</div>"
        },
        {
            "name": "NavbarComponent",
            "id": "component-NavbarComponent-abfdff1688808a3829951b43b3720945",
            "file": "src/app/navbar/navbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navbar",
            "styleUrls": [
                "./navbar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "lang",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "langChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Output } from '@angular/core';\nimport { UserService } from 'src/libs';\nimport { Input,EventEmitter } from '@angular/core';\n\n\n@Component({\n  selector: \"app-navbar\",\n  templateUrl: \"./navbar.component.html\",\n  styleUrls: [\"./navbar.component.scss\"]\n})\nexport class NavbarComponent implements OnInit {\n \n  @Input()  lang: any;\n  @Output() langChange: EventEmitter<any> = new EventEmitter();\n  constructor(private userService: UserService) { }\n\n  ngOnInit(): void {\n  }\n\n  toggleLogin(){\n  this.userService.login(); //logini toggle lamaya yarar.\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./navbar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!--navbar.component.html-->\n\n<igx-navbar title=\"Udemy Angular 9 Course\" actionButtonIcon=\"menu\" [isActionButtonVisible]=\"true\">\n\n    <!--input olarak alınacak değer lang-->\n    <!--onSelection: selection durumu olduğu zaman yeni ve eski seçenekler handle edilebiliyor-->\n    <!--$event.newSelection.value => output a buradaki selection ın yeni value su gönderiliyor-->\n    <!--  <igx-select [value]=\"lang\" (onSelection)=\"langChange.emit($event.newSelection.value)\">-->\n    <igx-select [value]=\"lang\" >\n        <igx-select-item value=\"tr\">Türkçe</igx-select-item>\n        <igx-select-item value=\"en\">İngilizce</igx-select-item>\n    </igx-select>\n\n\n    <igx-icon>search</igx-icon>\n    <igx-icon (click)=\"toggleLogin()\">account_circle</igx-icon>\n    <!--storage için bu ikona tıklayınca, click event aktif olunca çalışsın-->\n    <igx-icon>more_vert</igx-icon>\n\n    <igx-action-icon>\n        <igx-icon class=\"customIcon\" routerLink=\"home\">home</igx-icon>\n    </igx-action-icon>\n\n</igx-navbar>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-8f196770333aa216860a88c0b6b221aa",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "Parent1Component",
            "id": "component-Parent1Component-21fd9d1d7285a277beee7ef50f8e90a5",
            "file": "src/app/parents/parent1/parent1.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-parent1",
            "styleUrls": [
                "./parent1.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./parent1.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "calculaterData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "child1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Child1Component",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "Child1Component"
                        }
                    ]
                },
                {
                    "name": "name",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "successStatus",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "calculate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetParentForm",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\nimport { Child1Component } from 'src/libs';\n\n\n@Component({\n  selector: 'app-parent1',\n  templateUrl: './parent1.component.html',\n  styleUrls: ['./parent1.component.scss']\n})\nexport class Parent1Component implements OnInit {\n\n  //Parent componentten child componentte olan bir motet triggerlama @Viewchild\n  //Parent componentten child componentte olan bir motet triggerlama @Viewchild\n\n  @ViewChild(Child1Component) child1!: Child1Component;\n\n\n\n  name=\"\";\n  successStatus=0;\n  \n  calculaterData: any;\n\n  constructor() { }\n\n  ngOnInit(): void {}\n\n  calculate(){ //bu method calculaterData yı aktif edecek\n       this.calculaterData= {\n         name:this.name,\n         status:this.successStatus\n       };\n  }\n  \n  //1.yöntem\n  //resetParentForm(){\n  //  this.name=\"\";  // child componentten bir event emite edildi ve parent component ona göre name ve success bilgileri sıfırlandı\n  //  this.successStatus=0;\n  //}\n\n   //2.yöntem\n   resetParentForm(event : any){\n    alert(event);\n    this.name=\"\";  // child componentten bir event emite edildi ve parent component ona göre name ve success bilgileri sıfırlandı\n    this.successStatus=0;\n  }\n\n\n\n\n   \n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./parent1.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!--Child1Component i child.module.ts de import edildi,\n    index.ts de e export edildi,\n    parents.module.ts ChildModule import edildi artık parentlarda child componenti kullanılabilir-->\n\n    <div style=\"margin:2rem;\">\n        <div class=\"row\">\n            <div class=\"col-md-3\">\n                <!--child componentine bir input value su göndereceğiz  ve child componenti içerisinde bunu render ederek işlemlerde kullanılacak-->\n                İsim: <input type=\"text\" [(ngModel)]=\"name\">\n            </div>\n            <div class=\"col-md-3\">\n                Başarı durumu:\n                <select [(ngModel)]=\"successStatus\">\n                    <option value=\"0\">Seçin</option>\n                    <option [ngValue]=\"true\">Başarılı</option> <!--[ngValue] => data-->\n                    <option [ngValue]=\"false\">Başarısız</option>\n                </select>\n            </div>\n            <div class=\"col-md-2\">    \n                <button style=\"background-color: rgb(92, 236, 188); color: slateblue;  margin-left: 1px;\" (click)=\"calculate()\">Çalıştır</button>\n            </div>\n\n            <div class=\"col-md-2\">    \n                <button style=\"background-color: rgb(92, 236, 188); color: slateblue;  margin-left: 1px;\" (click)=\"child1.alertSth()\">Child Component Trigger</button>\n            </div>\n\n        </div>\n        \n        <!--data-binding olarak sonuç: {{name}} => yansıtabildiğimi göstermek için interpolation data binding e bakılacak-->\n        \n        <div class=\"row\">\n            <div class=\"col-md-12\">\n        <!--child componente name gönderilecek-->\n        <!--child component : \n        app-child1 [nameVal]=\"name\"></app-child1> => data olarak gönderilecek ise [namVal], string olarak göndereceksem nameVal olarak gönderilir ya da nameVal=\"'name'\", hem data hemde string ise [nameVal]=\"'name'\"-->\n        <!--yukarıda name değişken olarak ele alınmaktadır.-->\n        <!--yukarıdaki {{name}} değiştikçe aktif oldukça nameVal ya name gönderiliyor\n        child1.component.ts inde aldığı input değerini  child1.html  deki interpolation da kullanıyor.\n        <app-child1 [nameVal]=\"name\"> => input value sunu göndererek child componentini parenttan haberdar edilmiş oldu valueları gönderilerek-->\n            \n           <!--1.yöntem--> <!--<app-child1 [data]=\"calculaterData\" (resetForm)=\"resetParentForm()\"></app-child1>--><!--Hepsinin aktif olması isteniyor ancak her çalıştığında değil çalıştır butonuna basıldığında-->\n             <!--resetForm : template de  trigger işlemi için kullanılır buttondaki click gibi = diyerek triggerlanmasını istenilen metot veya işlem gösterilir\n                 child.component.ts deki outputta resetForm a bir akış olduğunda triggerlandığında buradaki resetform alanı anlayarak resetParentForm metoduna gidecek-->\n\n            <!--2.yöntem--><app-child1 [data]=\"calculaterData\" (resetForm)=\"resetParentForm($event)\"></app-child1>\n        </div>\n\n    </div>   \n      \n    </div>\n\n"
        },
        {
            "name": "Parent2Component",
            "id": "component-Parent2Component-0b9334793be7cd28d2413d56c58130bc",
            "file": "src/app/parents/parent2/parent2.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-parent2",
            "styleUrls": [
                "./parent2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./parent2.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-parent2',\n  templateUrl: './parent2.component.html',\n  styleUrls: ['./parent2.component.scss']\n})\nexport class Parent2Component implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./parent2.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>parent2 works!</p>\n"
        },
        {
            "name": "PipesComponent",
            "id": "component-PipesComponent-8df9b3966e6382a2de3bbd47fd970fb6",
            "file": "src/app/pipes/pipes.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pipes",
            "styleUrls": [
                "./pipes.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pipes.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cash",
                    "defaultValue": "1500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "cashValue",
                    "defaultValue": "14343.344",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "cities",
                    "defaultValue": "[\n    \"istanbul\",\"izmir\",\"ankara\",\"antalya\",\"mersin\",\"samsun\"\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "cityName",
                    "defaultValue": "\"İstanbul\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "objectVal",
                    "defaultValue": "{\n    foo: \"bar\",\n    baz: \"qux\",\n    nested: {xyz: 3,numbers:[1,2,3,4,5]} //obje içerisine obje oluşturulmuş\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Object",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "percentVal",
                    "defaultValue": "3213.43",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "title",
                    "defaultValue": "\"aNkaRa türKİYEnin başkenTidir!\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "today",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "turkishUpperCaseVal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-pipes',\n  templateUrl: './pipes.component.html',\n  styleUrls: ['./pipes.component.scss']\n})\nexport class PipesComponent implements OnInit {\n\n  title=\"aNkaRa türKİYEnin başkenTidir!\";\n  today: string | undefined;\n  cashValue= 14343.344 ;\n  percentVal=3213.43;\n  turkishUpperCaseVal: any;\n  objectVal: Object = {\n    foo: \"bar\",\n    baz: \"qux\",\n    nested: {xyz: 3,numbers:[1,2,3,4,5]} //obje içerisine obje oluşturulmuş\n  };\n  cityName=\"İstanbul\";\n  cash=1500;\n\n  cities =[\n    \"istanbul\",\"izmir\",\"ankara\",\"antalya\",\"mersin\",\"samsun\"\n  ];\n\n  constructor() { }\n\n  ngOnInit() {\n    this.today=new Date().toDateString();\n    this.turkishUpperCaseVal=(this.title as any).toLocaleUpperCase(\"tr-TR\");//Türkçe karakterlerin gelmesi için yapılması gereken transform\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./pipes.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 25
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\n    <div class=\"col-md-2\">\n        <h3>lowercase</h3><!--tüm yazıları küçük harfe çevirir.-->\n        <p>normal: {{title}}</p>\n        <p>lowercase:{{ title | lowercase }}</p> \n    </div>\n\n    <div class=\"col-md-2\">\n        <h3>titlecase</h3><!--Boşluklardan sonraki ilk harfi ayırır ve  harfi büyük yapar.-->\n        <p>titlecase:{{ title | titlecase }}</p>\n    </div>\n\n    <div class=\"col-md-2\">\n        <h4>uppercase</h4><!--Tüm yazıları büyük harfe çevirir-->\n        <p>uppercase: {{ title  | uppercase }}</p>\n        <p>turkish uppercase: {{ turkishUpperCaseVal }}</p> <!--Türkçe karakterlerin gelmesi için yapılması gereken transform-->\n    </div>\n\n    <div class=\"col-md-4\">\n        <h3>Date pipe</h3> <!--Tarih formatına çevirir-->\n         <p>normal date: {{today | date}}</p>\n        <!--<p>normal date: {{today | date : \"dd/MMMM/yy\"}}</p>-->\n        <p>pipe date: {{today | date :\"fullDate\"}}</p>\n        <p>turkish pipe longDate: {{today | date :\"longDate\":\"\":\"tr-TR\"}}</p> <!--Türkçe gelmesi için app.module.ts ye import işlemi yapıldı-->\n    </div>\n\n    <div class=\"col-md-2\">\n        <h3>Currency pipe</h3><!-- girilen sayının para birimi şeklinde yazılmasını sağlar-->\n        <p>normal value: {{cashValue}}</p>\n        <p>currency pipe value: {{ cashValue | currency : \"EUR\" }}</p>\n        <p>turkish pipe value: {{ cashValue | currency : \"TRY\":\"symbol\":\"1.2-2\":\"tr-TR\" }}</p> <!--virgülden sonra kaç hane gelmesi : 1.2-2-->\n    </div>\n\n    <div class=\"col-md-3\">\n        <h3>Json pipe</h3><!--json formatına çevirir-->\n        <p>Without Pipe</p>\n        <pre>{{objectVal}}</pre>\n\n        <p>With Pipe</p>\n        <pre>{{objectVal | json}}</pre> <!--bütün value yu json formatına dönüştürüyor ve html de gösteriyor, örn:swagger vb. teknolojiler de de json kullanılır.-->\n    </div>\n\n    <div class=\"col-md-2\">\n        <h3>Percent Pipe</h3> <!--Yüzde pipe ı-->\n        <p>{{percentVal | percent}}</p>\n        <p>{{percentVal | percent:\"\":\"tr-TR\"}}</p><!--Internationalization bir önceki işlemlerde app module e eklendiği için tekrar eklenmiyor-->\n        <!--2.yöntem => <p>%{{percentVal}}</p>-->\n    </div>\n\n    <div class=\"col-md-2\">\n        <h3>Slice Pipe</h3><!--Belirtilen indexdeki değerleri alma-->\n        <p>normal hali: {{cityName}}</p>\n        <p>slice pipe hali: {{cityName | slice:0:3}}</p>\n        <p>slice pipe hali: {{cityName | slice:-2}}</p>\n        <p>slice pipe hali: {{cityName | slice:3}}</p><!--3.indexe kadar gidip 3 ten sonrasını alır.-->\n        <p>slice pipe hali: {{cityName | slice:-4:-2}}</p>\n        <!--bir variable için birden fazla pipe ile  işlem yapılması -->\n        <p>slice & uppercase pipe hali: {{cityName | uppercase | slice:0:3}}</p>\n    </div>\n\n    <!--Kendimize özel transform işlemi yapan pipe oluşturulması-->\n    <!--TL için libs altına custom-pipes açıldı buraya ng g pipe tl --skip-import işlemi yapıldı-->\n    <!--pipes.module.ts içerisinde TlPipe declare edildi-->\n    <div class=\"col-md-2\">\n        <h3>Custom Pipes</h3>\n        <p>{{cash | tl}}</p> <!--tl.pipe alanında  name alanında tl yazığı için burayada tl yazıldı, buradaki cash  aldığım value değeridir-->\n    </div>\n\n\n    <!--Custom pipe part2(custom filtering pipe)\n    ngFor döngüsündeki değerleri trasform edebilen bir pipe yapılması-->\n    <div class=\"col-md-2\">\n        <h3>Custom Pipe Part-2</h3>\n        <br/>\n        <h4>Cities</h4>\n        <ul>\n            <li *ngFor=\"let city of cities | myFiltering :'a'\">{{city}}</li><!--içerisinde sadece a harfi içerenler gözüksün-->\n        </ul>\n    </div>\n</div>\n"
        },
        {
            "name": "PlakaComponent",
            "id": "component-PlakaComponent-3a7b0d6bdcd48ccd8065f8556a5c5a18",
            "file": "src/app/map/plaka/plaka.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-plaka",
            "styleUrls": [
                "./plaka.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./plaka.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "plakaData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { MapService } from 'src/libs';\n\n@Component({\n  selector: 'app-plaka',\n  templateUrl: './plaka.component.html',\n  styleUrls: ['./plaka.component.scss']\n})\nexport class PlakaComponent implements OnInit {\n\n   plakaData:any;\n\n  constructor(private mapService:MapService) { \n    this.mapService.cityPlakaSubject.subscribe(data=>{ //componentte call edildi ve dataya aktarıldı\n      this.plakaData=data;\n    })\n  }\n\n  ngOnInit(): void {\n    this.mapService.getCityPlakas(); //metodu çağırması yeterli\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./plaka.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div style=\"margin:2rem;\">\n    <div class=\"row\">\n        <h3>Plakalar</h3>\n        <div class=\"col-md-12\">\n            <ul>\n                <li *ngFor=\"let city of plakaData\">\n                    {{city.id}} - {{city.name}} - {{city.plaka}}\n                </li>\n            </ul>\n        </div>\n    </div>\n    </div>"
        },
        {
            "name": "RegionComponent",
            "id": "component-RegionComponent-e132c46e7018cb694af8296884c425b2",
            "file": "src/app/map/region/region.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-region",
            "styleUrls": [
                "./region.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./region.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "regionData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { MapService } from 'src/libs';\n\n@Component({\n  selector: 'app-region',\n  templateUrl: './region.component.html',\n  styleUrls: ['./region.component.scss']\n})\nexport class RegionComponent implements OnInit {\n\n  regionData:any;\n\n  constructor(private mapService:MapService) { \n    mapService.cityRegionSubject.subscribe(data=>{\n          this.regionData=data;\n    });\n  }\n\n  ngOnInit(): void {\n    this.mapService.getCityRegions();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./region.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div style=\"margin:2rem;\">\n    <div class=\"row\">\n        <h3>Bölgeler</h3>\n        <div class=\"col-md-12\">\n            <ul>\n                <li *ngFor=\"let city of regionData\">\n                    {{city.id}} - {{city.name}} - {{city.region}}\n                </li>\n            </ul>\n        </div>\n    </div>\n    </div>"
        },
        {
            "name": "RoleComponent",
            "id": "component-RoleComponent-85dc7b1a99eb4c6bd649d400626e844d",
            "file": "src/app/role/role.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-role",
            "styleUrls": [
                "./role.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./role.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "rolesData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "subs",
                    "defaultValue": "new SubSink()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "subs1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "subs2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "addNewRole",
                    "args": [
                        {
                            "name": "roleForm",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roleForm",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteRole",
                    "args": [
                        {
                            "name": "roleForm",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roleForm",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editRole",
                    "args": [
                        {
                            "name": "roleForm",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roleForm",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRoles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { RoleService } from 'src/libs';\nimport { enableProdMode } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { SubSink } from 'subsink';\n\n@Component({\n  selector: 'app-role',\n  templateUrl: './role.component.html',\n  styleUrls: ['./role.component.scss']\n})\nexport class RoleComponent implements OnInit, OnDestroy { //Subscription , OnDestroy: componentin ölümü\n\n  rolesData: any;\n\n  subs1!: Subscription;\n\n  //birden fazla subscribe olduğu zaman yeni bir subscription oluşturulacak\n  subs2!: Subscription;\n\n  private subs = new SubSink(); //bütün abonelikleri bunun içerisine ekleyip yönetilebilir,\n\n  constructor(private roleService: RoleService) { } //servis instance edilir\n\n\n  ngOnInit() {\n    this.getRoles(); //component ilk çalıştığı anda getroles ü çalıştıracak ve rolleri dağıtacak\n  }\n\n  ngOnDestroy(): void { //Subscription, Componentin ölümü olduğu zaman bu metodu çalıştır\n    this.subs1.unsubscribe(); //Subscription,abonelikten çıkmak, \n    //this.subs1.add(this.subs2); ile iki subscription birbirine bağlandığı için  this.subs2.unsubscribe();  yazılmadı.\n\n    this.subs.unsubscribe(); //SubSink, bütün abonelikler iptal olur.\n  }\n\n  getRoles() {\n\n    this.subs1 = this.roleService.getAllRoles().subscribe(data => {  //Subscription, subs1 ile bir değere eşitlenir\n      this.rolesData = data; //subscribe olduktan sonra gelen data eşitlendi\n    });\n\n    //SubSink\n    //this.subs.add(\n    //  this.roleService.getAllRoles().subscribe(data => { \n    //    this.rolesData = data; \n    //  })\n    //  )\n\n    //SubSink , içerisine bir array olarak eklenebilir, birden fazla aboleneliği tek bir subsink e aynı anda eklenebilinir.\n    //  this.subs.add(\n    //    this.roleService.getAllRoles().subscribe(data => {  \n    //      this.rolesData = data; \n    //    }),\n    //    this.roleService.getAllRoles().subscribe(data => {  \n    //      this.rolesData = data; \n    //    })\n    //  )\n\n  }\n\n  //Post isteğinden sonra geri dönen data tüm liste ise tekrar Get atmak zorun kalınmaz ama doğru yaklaşımda\n  //Post isteğinden sonra sadece create edilan data bilgileri geri döner. Bundan dolayı Get isteği atılması zorunludur.\n  addNewRole(roleForm: NgForm) {\n    this.subs2 = this.roleService.addRole(roleForm.value).subscribe(data => {\n      this.getRoles();//datanın gelip gelmediği kontrol edilerek getroles tekrar tekrar tetiklenerek liste çalışsın ki eklendiğini kontrol edelim.\n    },\n      error => {\n        alert(\"something went wrong add!\");\n      });\n\n    this.subs1.add(this.subs2); //Subscription, iki subscription birbirine bağlandı , veya\n    //2.yöntem\n    //this.subs1.add(\n    //  this.roleService.addRole(roleForm.value).subscribe(data => {\n    //  this.getRoles();//datanın gelip gelmediği kontrol edilerek getroles tekrar tekrar tetiklenerek liste çalışsın ki eklendiğini kontrol edelim.\n    //},\n    //  error => {\n    //    alert(\"something went wrong add!\");\n    //  }));\n\n\n    //SubSink\n    // this.subs.add( this.roleService.addRole(roleForm.value).subscribe(data => {\n    //   this.getRoles();//datanın gelip gelmediği kontrol edilerek getroles tekrar tekrar tetiklenerek liste çalışsın ki eklendiğini kontrol edelim.\n    //},\n    //  error => {\n    //    alert(\"something went wrong add!\");\n    //  }))\n  }\n\n  //update\n  editRole(roleForm: NgForm) {\n    this.roleService.editRole(roleForm.value).subscribe(data => {\n      this.getRoles(); //bunu yapmak yerine servise bir subject tanımlayıp gelen değeri subscribe olup anında o subject e next edilir, o subject te componenti sürekli dinler datanın sürekli değişip değişmediği anlık olarak kontrol edilebilir.\n    },\n      error => {\n        alert(\"something went wrong update!\");\n      });\n  }\n\n  //delete\n  deleteRole(roleForm: NgForm) {\n    this.roleService.deleteRole(roleForm.value).subscribe(data => {\n      this.getRoles();\n    },\n      error => {\n        alert(\"someting went wrong delete\");\n      })\n  }\n\n\n}\n\n//Bir observable data ya subscribe olup datalar ve error lar handle edildi component çalıştığı zaman get metodu atıyor\n//dönen observable datalara sürekli subscribe olup data ve errorlar handle ediliyor, fakat angular her component oluştuğu zamam\n//bunların instance ını oluştuyor bu işlemleri yapıyor ve componentin işlemi bittiğinde içerisindeki instance ları kaybediyor\n//fakat bu subcribe (abonelikler) devam ediyor ve sürekli gir çık yapıldığında componente sürekli subcribe ların sayısı artıyor\n//bu nedenle memory leak'lere yer açıyor abonelikler artıyor kurtulmak için 1)Subcription, 2)Subsink\n//1)Subcribe: Abone olduğum bir yapıdan çıkabilirim \n//2)Subsink: Hepsine array olarak aynı anda eklenmek için kullanılır.\n//İkisininde amacı aboneliklerden kurtulmak\n//Rxjs de bir özelliğide takeUntil operatörü: yapılacak olarak subscribe(aboneliğe) bir değer gelene kadar ya da bir değere\n// bitene kadar, ya da bir metot dönene kadar abone oluyor, orda da aynı işlemler gerçekleşiyor\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./role.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "roleService",
                        "type": "RoleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "roleService",
                        "type": "RoleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"row\">\n    <div class=\"col-md-9 offset-md-3\">\n        <form #roleForm=\"ngForm\" class=\"form-group\" (ngSubmit)=\"addNewRole(roleForm)\">\n\n            <label for=\"id\">id</label><br>\n            <input class=\"form-control\" type=\"text\" name=\"id\" ngModel/><br>\n\n            <!--ngSubmit: addnewrole e gidecek ve roleformu gönderecek servise gidip isteği gerçekleştirecek-->\n            <label for=\"name\">name</label><br>\n            <input class=\"form-control\" type=\"text\" name=\"name\"  ngModel/><br><br>\n            <!--ngModel: formu tetiklesin-->\n\n            <button type=\"submit\">Kaydet</button><br><br>\n            \n        </form>\n        <button (click)=\"editRole(roleForm)\">Düzenle</button> <br>\n            <!--editNewRole e gidecek oraya da roleform u gönderecek-->\n        <button (click)=\"deleteRole(roleForm)\">Sil</button>\n    </div>\n</div>\n\n<ul>\n    <li *ngFor=\"let role of rolesData[0]?.data\">\n        <!--rolesData[0]?.data => 0.indexinde veri varsa onun içindeki datayı döngüye sok-->\n        id: {{role._id}} - name: {{role.name}}\n\n    </li>\n</ul>"
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-25808f9802e2d284f2f11e53f7bc494f",
            "file": "src/app/sidebar/sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidebar",
            "styleUrls": [
                "./sidebar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sidebar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "routeLinks",
                    "defaultValue": "[\n    {\n       routerLink: \"home\",\n       name:\"Home\"\n    },\n    {\n      routerLink: \"role\",\n      name:\"Role\"\n   },\n   {\n    routerLink: \"user\",\n    name:\"User\"\n   },\n   {\n  routerLink: \"data-binding\",\n  name:\"Data Binding\"\n   },\n   {\n  routerLink: \"storage\",\n  name:\"Storage\"\n   },\n   {\n  routerLink: \"directives\",\n  name:\"Directives\"\n   },\n   {\n    routerLink: \"pipes\",\n    name:\"Pipes\"\n   },\n   {\n      routerLink: \"parents\",\n      name:\"Parents\"\n   },\n   {\n    routerLink: \"forms\",\n    name:\"Forms\"\n },\n   {\n  routerLink: \"map\",\n  name:\"Map\"\n   }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-sidebar',\n  templateUrl: './sidebar.component.html',\n  styleUrls: ['./sidebar.component.scss']\n})\nexport class SidebarComponent implements OnInit {\n\n  constructor() { }\n\n  routeLinks=[\n    {\n       routerLink: \"home\",\n       name:\"Home\"\n    },\n    {\n      routerLink: \"role\",\n      name:\"Role\"\n   },\n   {\n    routerLink: \"user\",\n    name:\"User\"\n   },\n   {\n  routerLink: \"data-binding\",\n  name:\"Data Binding\"\n   },\n   {\n  routerLink: \"storage\",\n  name:\"Storage\"\n   },\n   {\n  routerLink: \"directives\",\n  name:\"Directives\"\n   },\n   {\n    routerLink: \"pipes\",\n    name:\"Pipes\"\n   },\n   {\n      routerLink: \"parents\",\n      name:\"Parents\"\n   },\n   {\n    routerLink: \"forms\",\n    name:\"Forms\"\n },\n   {\n  routerLink: \"map\",\n  name:\"Map\"\n   }\n  ]\n\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#navigation {\r\n    height: calc(100vh - 4rem);\r\n}\r\n.sidebar {\r\n    font-size: 1.1rem;\r\n    &__item {\r\n        padding-left: 5%;\r\n    }\r\n}",
                    "styleUrl": "./sidebar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- app.component.html -->\n<div class=\"content-wrap\">\n  <igx-nav-drawer id=\"navigation\" #drawer [isOpen]=\"true\">\n    <ng-template igxDrawer>\n      <nav *ngFor=\"let routeLink of routeLinks ; let i=index\">  \n        <span igxDrawerItem igxRipple routerLink= {{routeLink.routerLink}}> {{routeLink.name}}</span>\n\n        <!-- *Tek tek isim eklemek yerine ngFor ile oluşturulan dizi dönüldü*\n        <span igxDrawerItem [isHeader]=\"true\">Sidebar Listesi</span>\n        <span igxDrawerItem igxRipple [active]=\"true\" routerLink=\"home\" >Home</span>\n        <span igxDrawerItem igxRipple routerLink=\"role\">Role</span>\n        <span igxDrawerItem igxRipple routerLink=\"user\">User</span>   \n        <span igxDrawerItem igxRipple routerLink=\"data-binding\">Data Binding</span>\n        <span igxDrawerItem igxRipple routerLink=\"storage\">Storage</span>\n        <span igxDrawerItem igxRipple routerLink=\"directives\">Directives</span>-->\n        \n\n      </nav>\n      \n    </ng-template>\n  </igx-nav-drawer>\n  <main>\n    <!-- app content -->\n  </main>\n</div>\n"
        },
        {
            "name": "UserComponent",
            "id": "component-UserComponent-f12647dbdb1b844bab4edfc8b51b3f69",
            "file": "src/app/user/user/user.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user",
            "styleUrls": [
                "./user.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.scss']\n})\nexport class UserComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./user.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>user works!</p>\n\n<button igxButton=\"flat\">Welcome to User Component</button>\n\n<!--user içerisinde details ve role olduğu için routing içinde routing yapıldı-->\n<!--bu yüzden buraya da routing yapıldığını belirtmek lazım router-outlet ile  derlenen route u tekrar o tag in içine koyabilmesi için-->\n<router-outlet></router-outlet> \n<!--router yapılmasa da component çalışır ama çalıştığını derlenen template ı kullanıcı göremez-->"
        },
        {
            "name": "UserDetailsComponent",
            "id": "component-UserDetailsComponent-001a0fac4985ffa75d03b134b18b345f",
            "file": "src/app/user/user/user-details/user-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-details",
            "styleUrls": [
                "./user-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-user-details',\n  templateUrl: './user-details.component.html',\n  styleUrls: ['./user-details.component.scss']\n})\nexport class UserDetailsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./user-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>user-details works!</p>\n<button igxButton=\"flat\">Welcome to User-Details Component</button>"
        },
        {
            "name": "UserListComponent",
            "id": "component-UserListComponent-3c5948bf29015994682a972c90d40011",
            "file": "src/app/user/user-list/user-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-list",
            "styleUrls": [
                "./user-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "userData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "getAllUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { UserService } from 'src/libs';\n\n@Component({\n  selector: 'app-user-list',\n  templateUrl: './user-list.component.html',\n  styleUrls: ['./user-list.component.scss']\n})\nexport class UserListComponent implements OnInit {\n\n  userData: any;\n\n  constructor(private userService: UserService) { }\n\n  ngOnInit(): void {\n\n    this.getAllUsers();\n\n  }\n\n  getAllUsers() {\n\n    this.userService.getAllUsers().subscribe(data => {\n      this.userData = data\n    }, error => {\n      alert(`${error.error.exception.message}`); //Jwt could not found! hatası veriyor web servisi bulamadığı için  userservice de isteği atarken header belirlenip getAllUsers e eklenerek bu  istek karşılanabilir ancak clean code olmayacağından interceptor oluşturulacak\n      console.log(\"error\", error);\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./user-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>user-list works!</p>\n\n<button igxButton=\"flat\">Welcome to User-List Component</button>\n\n<ul>\n    <li *ngFor=\"let user of userData ? userData : []\">\n\n        name: {{user.name}} - surname: {{user.surname}} - email: {{user.email}} - birthday: {{user.birthDay | date: \"medium\": \"\":\"tr-TR\"}}\n\n    </li>\n</ul>"
        },
        {
            "name": "UserRoleComponent",
            "id": "component-UserRoleComponent-3b5c91a413b6b4aeea951461ed86b928",
            "file": "src/app/user/user/user-role/user-role.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-role",
            "styleUrls": [
                "./user-role.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-role.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-user-role',\n  templateUrl: './user-role.component.html',\n  styleUrls: ['./user-role.component.scss']\n})\nexport class UserRoleComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./user-role.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>user-role works!</p>\n<button igxButton=\"flat\">Welcome to User-Role Component</button>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-cd86f1005efce793457b37111a89f609",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core'; //CUSTOM_ELEMENTS_SCHEMA: Haberdar olmadığı şeyleri çalıştırmak için yazıldı\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\nimport { ToastrModule } from 'ngx-toastr'; //toastr import edildi\r\nimport { NgxSpinnerModule } from \"ngx-spinner\"; //Spinner import edildi\r\n//import { IgxButtonModule } from 'igniteui-angular';\r\n//import { HomeComponent } from './home/home.component';\r\n//import { UserComponent } from './user/user.component';\r\nimport { RoleComponent } from './role/role.component';\r\nimport { NavbarComponent } from './navbar/navbar.component';\r\nimport { SidebarComponent } from './sidebar/sidebar.component';\r\n//import { UserDetailComponent } from './user/user-detail/user-detail.component';//ignite button modülü import edildi.\r\nimport { IgxNavbarModule, IgxIconModule, IgxNavigationDrawerModule, IgxSelectModule } from 'igniteui-angular';\r\n//import { DataBindingComponent } from './data-binding/data-binding.component';\r\n\r\nimport { CookieService } from 'ngx-cookie-service';\r\n\r\n\r\nimport { registerLocaleData } from \"@angular/common\"; //(pipes.component.html deki date daki alanın Türkçe gelmesi için\r\nimport localeTr from \"@angular/common/locales/tr\";//date daki alanın Türkçe gelmesi için\r\nimport localTrExtra from \"@angular/common/locales/extra/tr\";//date daki alanın Türkçe gelmesi için\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { UserService } from 'src/libs/services/user.service';\r\nimport { AuthInterceptor } from 'src/libs';\r\n\r\nregisterLocaleData(localeTr, \"tr-TR\", localTrExtra);//date daki alanın Türkçe gelmesi için\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\r\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    //HomeComponent,\r\n    //UserComponent,\r\n    //RoleComponent,\r\n    NavbarComponent,\r\n    SidebarComponent,\r\n    //DataBindingComponent,\r\n    //UserDetailComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    CommonModule,\r\n    BrowserAnimationsModule,\r\n    HttpClientModule, //http istekleri gerçekleştirebilmek için\r\n    ToastrModule.forRoot({\r\n      timeOut: 4000,\r\n      progressBar: true,\r\n      easing: \"ease-in\",\r\n      closeButton: false,\r\n      progressAnimation: \"decreasing\",\r\n      preventDuplicates: true,\r\n      positionClass: \"toast-bottom-left\"\r\n    }),\r\n\r\n    //ngx transtlate\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: HttpLoaderFactory,\r\n        deps: [HttpClient]\r\n      }\r\n    }),\r\n\r\n\r\n    NgxSpinnerModule,\r\n    //IgxButtonModule //ignite button modülü import edildi. //IgxButton burada tanımlanırsa sadece yukarıdaki declarations larda kullanılabilir\r\n    IgxNavbarModule,\r\n    IgxIconModule,\r\n    IgxNavigationDrawerModule,\r\n    IgxSelectModule,\r\n  ],\r\n\r\n  //Servis olarak yapıldığı modül olarak yapılmadığı için provider olarak eklendi\r\n  //Cookie servisi provide edildi , her yerden erişilebilir durumda\r\n  providers: [CookieService, UserService, {\r\n    //Proje artık interceptors leri tanıyor ve atılan her istekte manufule edilen request gidecek\r\n    //angular ın interseptoründen provide edildiği için provide olarak HTTP_INTERCEPTORS denilir\r\n    provide: HTTP_INTERCEPTORS,\r\n    //Kullanacağım interceptor - custom, http interceptors arasına bir daha interceptor yapılmış oluyor üzerine yazacak\r\n    useClass: AuthInterceptor,\r\n    //multi istekleri yapsın\r\n    multi: true\r\n  }],\r\n\r\n\r\n  bootstrap: [AppComponent],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA] //ngx-spinner import edildi\r\n})\r\nexport class AppModule { }\r\n\r\nexport function HttpLoaderFactory(http: HttpClient) { //assets dosyaları kendimiz import ediyoruz\r\n  //bazen tarayıcıların cash inde kaldığı için ek olarak  ?cb=' + new Date().getTime() eklendi. Proje her build oluduğunda farklı bir json dosyası çıkartacağı için tarayıcıların cahche ine takılmayacaktır\r\n  //Her build edildiğinde yeni cahche yeni tarayıcı dosyasını değiştirecektir bu sayede json larda değişiklik yapılırsa tarayıcıdaki eski dosya kalmaz kullanıcılara yansır.\r\n  return new TranslateHttpLoader(\r\n    http,\r\n     \"./assets/i18n/\",\r\n      \".json \"\r\n      //?cb=\" + new Date().getTime()\r\n      );\r\n}\r\n\r\n\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthInterceptor"
                        },
                        {
                            "name": "UserService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "NavbarComponent"
                        },
                        {
                            "name": "SidebarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-1b68b48dfc2f81132fc41057cad8cc41",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { Component, NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthChildGuard, AuthExitGuard, AuthGuard } from 'src/libs';\nimport { HomeComponent } from './home/home.component';\nimport { RoleComponent } from './role/role.component';\n\n\nconst routes: Routes = [\n  { //Eklemek istediğimiz her route u burada array içerisinde objelerle tanımlayacağız\n     path:\"home\", // /home  denildiğinde \n     //component:HomeComponent //home componenetine gidecek\n     //Lazy loading ile işlem yapılacak, karmaşık yapılarda birden fazla paketler olduğunda kullanılır.\n     loadChildren:() => \"import('./home/home.module').then(m=>m.HomeModule)\"\n  },\n  {\n    path:\"role\",\n    loadChildren:()=> \"import('./role/role.module').then(m=>m.RoleModule)\"\n  },\n  {\n    path:\"user\",\n    loadChildren:()=> \"import('./user/user.module').then(m=>m.UserModule)\"\n  },\n  \n  {\n    path:\"data-binding\",\n    loadChildren:()=>\"import('./data-binding/data-binding.module').then(m=>m.DataBindingModule)\" //m.DataBindingModule - export ettiğim class ı çağırıyorum\n  },\n  {\n    //directives rootuna gittiğin zaman bu roottan bir activate olduğunda çıkış yaptığın zaman bu guard ı çalıştır\n    path:\"directives\",\n    loadChildren:()=>\"import('./directives/directives.module').then(m=>m.DirectivesModule)\" ,\n    //canDeactivate: Directives root undan çıkarken ki anda bu guard çalışıyor ve bellirli kontrol mekanizmaları sağlıyor, true ya da false dönerek bu sayfadan ayrılık ayrılmaması gerektiğine karar veriyor\n    canDeactivate:[AuthExitGuard]\n  },\n  {\n    path:\"pipes\",\n    loadChildren:()=>\"import('./pipes/pipes.module').then(m=>m.PipesModule)\" \n  },\n  {\n    path:\"parents\",\n    loadChildren:()=>\"import('./parents/parents.module').then(m=>m.ParentsModule)\" \n  },\n  {\n    path:\"map\",\n    loadChildren:()=>\"import('./map/map.module').then(m=>m.MapModule)\" \n  },\n  //{\n     //sayfalar arasında geçiş yaparken user/:id gönderildiğinde buradaki id yi parametre olarak alabilmek için \n     //user-detail daki user-detail.component.ts ye gidilir.\n    //path:\"user/:id\", //user ın altındaki user-detail a ulaşmak için parametre bekliyorum buda id, bu id ye istenilen ad verilebilir bu url e gidildiğinde verilen parametre çekileceğinde  .id olarak çekilecek.\n    //component:UserDetailComponent\n  //},\n  //Kullanıcı bunlardan hiç birine uygun olmayan url girerse\n  {\n  path:\"storage\", //Storage olarak gelirse\n  loadChildren:()=>\"import('./storage/storage.module').then(m=>m.StorageModule)\", //storage modül classını import edece\n   \n  //Storage e gittiğinde canActivate yap, storage aktif olduğu anda çalışacak bir guard\n\n  //bu url her çalıştığında guard çalışacak\n  //storage.module e de eklenebilirdi.\n  canActivate:[AuthGuard] //storage çalıştığı anda modüller arası gidilip gidilemeyeceğine AuthGuard karar verecek\n},\n\n  {\n    path:\"**\",\n    component:HomeComponent //yanlışta girse home a gidecek.\n    //veya   -  loadChildren:()=>import(\"./home/home.module\").then(m=>m.HomeModule)\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes,{useHash:true})], //{useHash:true} =>artık html in kendi path stratejisini değil angular hash location stratejisi kullanılır.\n  exports: [RouterModule]                                 //{useHash:true} =>child rootlara giderken anguların stratejisini kullanmamıza yarar, araya # atar. # atarsa bulunduğum sayfaya geri gönderir ve göstermeye devam eder\n})\n//Proje routing modülünden yönetiliyor\nexport class AppRoutingModule { } //app.module.ts ye import ettik\n\n//canActivate ve canActivateChild rol yetkilerine göre kullanılır user a yetkim var ama childlarına yetkim yoksa bu guard kullanılarak erişim engellenebilir.Birden fazla guard kullanılabilir.\n//canDeactivate genel olarak kullanılır yetki için değil\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ChildModule",
            "id": "module-ChildModule-79f8cf58496fbfe20483752efb8d7a65",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/libs/child-components/child.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Child1Component } from './child1/child1.component';\nimport { FormsModule } from '@angular/forms';\n\n\n\n@NgModule({\n  declarations: [Child1Component], //Child1Component declare edildi\n  imports: [\n    CommonModule,\n    FormsModule //data binding olması için eklendi\n  ],\n  exports: [Child1Component] //başka modüllerinde bu componente erişebilmesi ve declare edebilmesi içinde export edilmesi gerekiyor\n})\nexport class ChildModule { } //Child1Component componenti kullanan için bu modülü import eden başka bir future modül declare olarak kullanabilsin, erişebilsin demektedir export\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "Child1Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FormsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "Child1Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DataBindingModule",
            "id": "module-DataBindingModule-3bf948ff289828d66584a8f2c3926bb0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/data-binding/data-binding.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { DataBindingComponent } from './data-binding.component';\nimport { FormsModule } from '@angular/forms';\n\nconst routes:Routes = [\n  {\n  path:\"\",\n  component:DataBindingComponent\n}\n];\n\n@NgModule({\n  declarations: [DataBindingComponent],\n  imports: [\n    CommonModule,RouterModule.forChild(routes),FormsModule //FormsModule  - ngModel kullanabilmek için gereklidir.\n  ]\n})\nexport class DataBindingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DataBindingComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FormsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DirectivesModule",
            "id": "module-DirectivesModule-d6334797ab7522a846ddba3e470e08c0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/directives/directives.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DirectivesComponent } from './directives/directives.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { HighlightDirective } from 'src/libs';\n\nconst routes: Routes =[ \n  {\n    path:\"\", \n    component:DirectivesComponent\n  }\n]\n\n@NgModule({\n  declarations: [\n    DirectivesComponent,\n    HighlightDirective\n  ],\n  imports: [\n    CommonModule,RouterModule.forChild(routes),FormsModule\n  ]\n})\nexport class DirectivesModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DirectivesComponent"
                        },
                        {
                            "name": "HighlightDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FormsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FormsModule",
            "id": "module-FormsModule-ba51056b1cc59ad76d349c8a1580c402",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/forms/forms.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsComponent } from './forms/forms.component';\n\n\n\n@NgModule({\n  declarations: [\n    FormsComponent\n  ],\n  imports: [\n    CommonModule\n  ]\n})\nexport class FormsModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeModule",
            "id": "module-HomeModule-7c86a724fa6c29a5acd8fc64c4b08b15",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/home/home.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HomeComponent } from './home.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { IgxButtonModule } from \"igniteui-angular\";\n\nimport { HttpClient } from '@angular/common/http';\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\n\n\n//LazyLoading için işlem yapılıyor\n\nconst routes: Routes = [ //Routing\n  {\n    path: \"\", ///home/1 şeklinde kontrol yapılabilir , bu routing e yanına bir path gelmediği zaman home componenti çağırılsın\n    component: HomeComponent\n  }\n]\n\n@NgModule({\n  declarations: [HomeComponent], //Bu modül içerisinde homecomponent kullanılabilir\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes), //Router modülünü bu rout a bildirmemiz gerekiyor,\n    IgxButtonModule, //sadece home componentinde gelir\n    TranslateModule.forChild({ //**forChild yapıldı\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient]\n      }\n    })\n  ]\n})\nexport class HomeModule { }\n\n\n\n//assets dosyaları kendimiz import ediyoruz\n//bazen tarayıcıların cash inde kaldığı için ek olarak  ?cb=' + new Date().getTime() eklendi. Proje her build oluduğunda farklı bir json dosyası çıkartacağı için tarayıcıların cahche ine takılmayacaktır\n//Her build edildiğinde yeni cahche yeni tarayıcı dosyasını değiştirecektir bu sayede json larda değişiklik yapılırsa tarayıcıdaki eski dosya kalmaz kullanıcılara yansır.\nexport function HttpLoaderFactory(http: HttpClient) {\n  return new TranslateHttpLoader(\n    http,\n    \"../../assets/i18n/\",\n    \".json\" //?cb=\" + new Date().getTime()\n    );\n}\n\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HomeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MapModule",
            "id": "module-MapModule-1ee734ee28ae096da5252f5613169ef8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/map/map.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CityComponent } from './city/city.component';\nimport { RegionComponent } from './region/region.component';\nimport { PlakaComponent } from './plaka/plaka.component';\nimport { MapComponent } from './map/map.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { MapService } from 'src/libs';\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: MapComponent\n  }\n]\n\n@NgModule({\n  declarations: [\n    CityComponent,\n    RegionComponent,\n    PlakaComponent,\n    MapComponent\n  ],\n  imports: [\n    CommonModule, RouterModule.forChild(routes), FormsModule\n  ],\n  providers:[MapService] //Provide etme nedeni: angular map modül içerisindeki declaration lara instance ını oluşturma imkanı sağlar\n  //Nereye declare edildiyse oranın altında bulunan tüm componentlerde kullanılacak instance oluşturulmasını sağlar\n})\nexport class MapModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "MapService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CityComponent"
                        },
                        {
                            "name": "MapComponent"
                        },
                        {
                            "name": "PlakaComponent"
                        },
                        {
                            "name": "RegionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FormsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ParentsModule",
            "id": "module-ParentsModule-0b23a151fd1574f5322d32af1b2fff24",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/parents/parents.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Parent1Component } from './parent1/parent1.component';\nimport { Parent2Component } from './parent2/parent2.component';\nimport { ChildModule } from 'src/libs';\nimport { RouterModule, Routes } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\n\nconst routes: Routes =[\n  {\n    path:\"\",\n    children: [\n      {\n        path:\"parent1\",\n        component:Parent1Component\n      },\n      {\n        path:\"parent2\",\n        component:Parent2Component\n      },\n      {\n        path:\"\",\n        redirectTo:\"parent1\",\n        pathMatch:\"full\"\n      }\n    ]\n  }\n];\n\n\n@NgModule({\n  declarations: [\n    Parent1Component,\n    Parent2Component\n  ],\n  imports: [\n    CommonModule,\n    ChildModule, //Child modülü eklendi\n    RouterModule.forChild(routes),\n    FormsModule\n  ]\n})\nexport class ParentsModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "Parent1Component"
                        },
                        {
                            "name": "Parent2Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ChildModule"
                        },
                        {
                            "name": "FormsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PipesModule",
            "id": "module-PipesModule-3a99af48b258c8f78cee0744bc1443a9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pipes/pipes.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PipesComponent } from './pipes.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { MyFilteringPipe, TlPipe } from 'src/libs';\n\nconst routes: Routes=[\n  {\n    path:\"\",\n    component: PipesComponent\n  }\n]\n\n@NgModule({\n  declarations: [\n    PipesComponent,\n   TlPipe, //declare edildi\n    MyFilteringPipe\n  ],\n  imports: [\n    CommonModule,RouterModule.forChild(routes),FormsModule //FormsModule binding işlemleri yapacağımız için eklendi\n  ]\n})\nexport class PipesModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MyFilteringPipe"
                        },
                        {
                            "name": "PipesComponent"
                        },
                        {
                            "name": "TlPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FormsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RoleModule",
            "id": "module-RoleModule-0e9de9b8beef1f7378c79a8408d3fd9f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/role/role.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { RoleComponent } from './role.component';\nimport { FormsModule } from '@angular/forms';\nimport { RoleService } from 'src/libs';\n\nconst routes: Routes =[\n  {\n    path:\"\",\n    component:RoleComponent\n  }\n];\n\n@NgModule({\n  declarations: [RoleComponent],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    FormsModule\n  ],\n  providers:[RoleService] //angular kullanacağımız componenette instance ını oluştuması için eklendi\n  //declare edilen componentlerde instance ını kullanabiliriz.\n})\nexport class RoleModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "RoleService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RoleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FormsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StorageModule",
            "id": "module-StorageModule-af9b721e074ab3f9ce0f7fc1e1a347ba",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/storage/storage.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LocalStorageComponent } from './local-storage/local-storage.component';\nimport { CookieComponent } from './cookie/cookie.component';\nimport { HomeComponent } from '../home/home.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\n\nconst routes: Routes=[\n  {\n    path:\"\",\n    children: [//stroge altında iki tane component olduğu için(cookie,local-storage)  roota geldiği zaman hangisinin aktif olacağının belirlenmesi\n      {\n        path:\"cookie\", //cookie gelirse \n        component:CookieComponent //bu component çalışsın\n      },\n      {\n        path:\"local-storage\",\n        component:LocalStorageComponent\n      },\n      {\n        path:\"\", //her ikisi de gelmezse \n        redirectTo:\"local-storage\",  //bu componenti çalıştır\n        pathMatch:\"full\"\n      }\n    ]\n  }\n]\n\n@NgModule({\n  declarations: [\n    LocalStorageComponent,\n    CookieComponent\n  ],\n  imports: [\n    CommonModule,RouterModule.forChild(routes),FormsModule //FormsModule ekledik two way binding kullanacağız\n  ]\n})\nexport class StorageModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CookieComponent"
                        },
                        {
                            "name": "LocalStorageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FormsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StorybookModule",
            "id": "module-StorybookModule-5df0a04cca44e402cb6f79f4cd59e573",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/storybook/storybook.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { FormsModule } from '@angular/forms';\r\nimport ButtonComponent from 'src/stories/button.component';\r\nimport { IgxButtonModule } from 'igniteui-angular';\r\n\r\nconst routes: Routes =[ \r\n  {\r\n    path:\"\", \r\n    //component:DirectivesComponent\r\n  }\r\n]\r\n\r\n@NgModule({\r\n  declarations: [ButtonComponent],\r\n  imports: [\r\n    CommonModule,RouterModule.forChild(routes),FormsModule,IgxButtonModule\r\n  ]\r\n})\r\nexport class StorybookModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FormsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserModule",
            "id": "module-UserModule-871d9cfe3a78b9547a034a87470d4dfa",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/user/user.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UserListComponent } from './user-list/user-list.component';\nimport { UserComponent } from './user/user.component';\nimport { UserDetailsComponent } from './user/user-details/user-details.component';\nimport { UserRoleComponent } from './user/user-role/user-role.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport {IgxButtonModule} from \"igniteui-angular\";\nimport { AuthChildGuard } from 'src/libs/guards/auth-child.guard';\n//Route tanımlıyoruz\n//Routing de okuma yukarıdan aşağı doğru olur\nconst routes: Routes =[\n  {\n    path:\"\",\n    component: UserListComponent\n  },\n  {\n    path:\":id\", //ekstra bir parametre gönderirsem usercomponent çalışsın\n    component: UserComponent,\n    children:[//user /5 yazıldığında sonrasında başka routler olması gerektiğini bildirmek istersek children denmesi gerek,\n        {\n          path:\"details\",\n          component:UserDetailsComponent\n        },\n        {\n          path:\"role\",\n          component:UserRoleComponent\n        },\n\n        //User a gitsin ama details ve role e gitmesin istenirse bunun kaldırılması lazım\n        //Farklı url lerde istek yapılırsa\n        //{\n        //  path:\"\",\n        //  redirectTo:\"details\", //ne olursa olsun detail componentine gitsin\n        //  pathMatch: \"full\" //tam eşleşmesi için\n        //}\n    ],//usercomponent in childrenları var user-role ve user-details\n\n    //user çalışsın userdetail ve role login olunmadıysa gözükmesin\n    canActivateChild:[AuthChildGuard]\n  },\n  {\n\n  }\n]\n\n@NgModule({\n  declarations: [\n    UserListComponent,\n    UserComponent,\n    UserDetailsComponent,\n    UserRoleComponent,\n  ],\n  imports: [\n    CommonModule,IgxButtonModule,RouterModule.forChild(routes)\n  ]\n})\nexport class UserModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UserComponent"
                        },
                        {
                            "name": "UserDetailsComponent"
                        },
                        {
                            "name": "UserListComponent"
                        },
                        {
                            "name": "UserRoleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "buttonComponentNotes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/1-Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require(\"src/app/storybook/button/buttons-prefix.notes.md\")\r\n.default"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  api: {\n    nestjs: {\n      role:\"https://udemy-nestjs-course.herokuapp.com/api/\" //başlangıç url i yazıldı\n    }\n  }\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,  //prod gibi buraya da eklenir.\n   api: {\n    nestjs: {\n      role:\"https://udemy-nestjs-course.herokuapp.com/api\" //başlangıç url i yazıldı\n    }\n  }\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            }
        ],
        "functions": [
            {
                "name": "HttpLoaderFactory",
                "file": "src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "HttpLoaderFactory",
                "ctype": "miscellaneous",
                "subtype": "function",
                "file": "src/app/home/home.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/stories/1-Button.stories.ts": [
                {
                    "name": "buttonComponentNotes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/1-Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require(\"src/app/storybook/button/buttons-prefix.notes.md\")\r\n.default"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  api: {\n    nestjs: {\n      role:\"https://udemy-nestjs-course.herokuapp.com/api/\" //başlangıç url i yazıldı\n    }\n  }\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,  //prod gibi buraya da eklenir.\n   api: {\n    nestjs: {\n      role:\"https://udemy-nestjs-course.herokuapp.com/api\" //başlangıç url i yazıldı\n    }\n  }\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/app.module.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/home/home.module.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "file": "src/app/home/home.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "home",
                        "loadChildren": "./home/home.module#HomeModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/home/home.module.ts",
                                        "module": "HomeModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "HomeComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "HomeModule"
                            }
                        ]
                    },
                    {
                        "path": "role",
                        "loadChildren": "./role/role.module#RoleModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/role/role.module.ts",
                                        "module": "RoleModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "RoleComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "RoleModule"
                            }
                        ]
                    },
                    {
                        "path": "user",
                        "loadChildren": "./user/user.module#UserModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/user/user.module.ts",
                                        "module": "UserModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "UserListComponent"
                                            },
                                            {
                                                "path": ":id",
                                                "component": "UserComponent",
                                                "children": [
                                                    {
                                                        "path": "details",
                                                        "component": "UserDetailsComponent"
                                                    },
                                                    {
                                                        "path": "role",
                                                        "component": "UserRoleComponent"
                                                    }
                                                ],
                                                "canActivateChild": [
                                                    "AuthChildGuard"
                                                ]
                                            },
                                            {}
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "UserModule"
                            }
                        ]
                    },
                    {
                        "path": "data-binding",
                        "loadChildren": "./data-binding/data-binding.module#DataBindingModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/data-binding/data-binding.module.ts",
                                        "module": "DataBindingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "DataBindingComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "DataBindingModule"
                            }
                        ]
                    },
                    {
                        "path": "directives",
                        "loadChildren": "./directives/directives.module#DirectivesModule",
                        "canDeactivate": [
                            "AuthExitGuard"
                        ],
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/directives/directives.module.ts",
                                        "module": "DirectivesModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "DirectivesComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "DirectivesModule"
                            }
                        ]
                    },
                    {
                        "path": "pipes",
                        "loadChildren": "./pipes/pipes.module#PipesModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/pipes/pipes.module.ts",
                                        "module": "PipesModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "PipesComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "PipesModule"
                            }
                        ]
                    },
                    {
                        "path": "parents",
                        "loadChildren": "./parents/parents.module#ParentsModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "ParentsModule"
                            }
                        ]
                    },
                    {
                        "path": "map",
                        "loadChildren": "./map/map.module#MapModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/map/map.module.ts",
                                        "module": "MapModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "MapComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "MapModule"
                            }
                        ]
                    },
                    {
                        "path": "storage",
                        "loadChildren": "./storage/storage.module#StorageModule",
                        "canActivate": [
                            "AuthGuard"
                        ],
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/storage/storage.module.ts",
                                        "module": "StorageModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "children": [
                                                    {
                                                        "path": "cookie",
                                                        "component": "CookieComponent"
                                                    },
                                                    {
                                                        "path": "local-storage",
                                                        "component": "LocalStorageComponent"
                                                    },
                                                    {
                                                        "path": "",
                                                        "redirectTo": "local-storage",
                                                        "pathMatch": "full"
                                                    }
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "StorageModule"
                            }
                        ]
                    },
                    {
                        "path": "**",
                        "component": "HomeComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/data-binding/data-binding.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DataBindingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/directives/directives.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DirectivesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/forms/forms.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/city/city.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CityComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map/map.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/map/plaka/plaka.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlakaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/map/region/region.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/navbar/navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/parents/parent1/parent1.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Parent1Component",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/parents/parent2/parent2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Parent2Component",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/pipes.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PipesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/role/role.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RoleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/storage/cookie/cookie.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CookieComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/storage/local-storage/local-storage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LocalStorageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/storybook/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/todo-service.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TodoServiceService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/user/user-list/user-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/user/user/user-details/user-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/user/user/user-role/user-role.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserRoleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/user/user/user.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/libs/child-components/child1/child1.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Child1Component",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/libs/custom-directives/highlight.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "HighlightDirective",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/libs/custom-pipes/my-filtering.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "MyFilteringPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/libs/custom-pipes/tl.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TlPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/libs/guards/auth-child.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthChildGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/libs/guards/auth-exit.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthExitGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/libs/guards/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/libs/interceptors/auth.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/libs/services/map.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MapService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/libs/services/map.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "city",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/libs/services/role.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RoleService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/libs/services/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/stories/1-Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "buttonComponentNotes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}